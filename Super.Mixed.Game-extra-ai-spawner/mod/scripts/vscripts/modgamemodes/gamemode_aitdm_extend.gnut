// basically a copy of gruntmode. with only npcs spawns, players are still pilots

untyped
global function Modded_Gamemode_AITdm_Extended_Init

// npc counts
const int SQUADS_PER_TEAM = 5
//const int SQUADS_PER_TEAM_MORE_PLAYERS = 3 // maybe do reduced squad if we have more players and reached higher level
const int SQUADS_PER_TEAM_HIGH_LEVEL = 3 // maybe do reduced squad if we have reached higher level
const int REAPERS_PER_TEAM = 2 // was 2, reduced reaper spawn since we're using tick spawner reapers

const int MARVINS_PER_TEAM = 0
const int PROWLERS_PER_TEAM = 4
const int PROWLER_SQUADS_PER_TEAM = 0 // prowler squad: 2 cqb prowler with 3 small prowlers
const int PILOTS_PER_TEAM = 3

const int TITANS_PER_TEAM = 0
const int GUNSHIPS_PER_TEAM = 0 // was 2, removed until I figure out how to make gunships attacking

// escalator default value
const int LEVEL_SPECTRES = 80
const int LEVEL_STALKERS = 150
const int LEVEL_REAPERS = 230
const int LEVEL_GUNSHIPS = 280 // unused
const int LEVEL_TITANS = 320

// scores
const int PLAYER_SCORE_AMOUNT = 5
const int PILOT_SCORE_AMOUNT = 5
const int GUNSHIP_SCORE_AMOUNT = 5
const int MARVIN_SCORE_AMOUNT = 1
const int GRUNT_SCORE_AMOUNT = 1
const int SPECIALIST_GRUNT_SCORE_AMOUNT = 2
const int SPECTRE_SCORE_AMOUNT = 1 // was 2. spectres shouldn't have too many score
const int STALKER_SCORE_AMOUNT = 2
const int PROWLER_SCORE_AMOUNT = 2
const int SMALL_PROWLER_SCORE_AMOUNT = 1
const int REAPER_SCORE_AMOUNT = 5
const int DRONE_SCORE_AMOUNT = 0
const int TITAN_SCORE_AMOUNT = 10

struct
{
	// Due to team based escalation everything is an array
	array< int > levels = [ LEVEL_SPECTRES, LEVEL_SPECTRES ]
	array< array< string > > podEntities = [ [ "npc_soldier" ], [ "npc_soldier" ] ]
	array< bool > reapers = [ false, false ]

	array< bool > marvins = [ false, false ]
	array< bool > prowlers = [ false, false ] // bind with stalkers

	array< bool > gunships = [ false, false ]
	array< bool > pilots = [ false, false ]
	array< bool > titans = [ false, false ]
} file


void function Modded_Gamemode_AITdm_Extended_Init()
{
	SetSpawnpointGamemodeOverride( ATTRITION ) // use bounty hunt spawns as vanilla game has no spawns explicitly defined for aitdm

	AddCallback_GameStateEnter( eGameState.Prematch, OnPrematchStart )
	AddCallback_GameStateEnter( eGameState.Playing, OnPlaying )

	// scoring
	SetUpAITdmExtendedScoreEvent() // score setup
	AddCallback_OnPlayerKilled( HandleScoreForPlayerOrNPCKill )
	AddCallback_OnNPCKilled( HandleScoreForPlayerOrNPCKill )
	// modified callback in _score.nut: for handling doomed health loss titans
	AddCallback_TitanDoomedScoreEvent( HandleTitanDoomedScore )

	AddCallback_OnClientConnected( OnPlayerConnected )

	AddCallback_NPCLeeched( OnSpectreLeeched )

    // game settings
	Highlight_SetCustomHighlightFunction( AITdmExtend_Highlight ) // highlight handle for phase shift and such
    // npc executions
	MeleeSyncedNPC_AllowNPCTitanExecutions( true )
	MeleeSyncedNPC_AllowNPCPilotExecutions( true )
	MeleeSyncedNPC_AllowNPCGruntExecutions( true )
	MeleeSyncedNPC_AllowNPCSpectreExecutions( true )
	MeleeSyncedNPC_AllowNPCPilotExecuteOtherNPCs( true ) // pilot models don't have syncedMeleeData initialized, so let them use mp pilot executions

    // ai configs
	AddSpawnCallback( "npc_soldier", GruntConfig )
	AddSpawnCallback( "npc_pilot_elite", PilotConfig )
	AddSpawnCallback( "npc_marvin", MarvinConfig )
	AddSpawnCallback( "npc_prowler", ProwlerConfig )
	AddSpawnCallback( "npc_spectre", SpectreConfig )
	AddSpawnCallback( "npc_stalker", StalkerConfig )
	AddSpawnCallback( "npc_super_spectre", ReaperConfig )
	AddSpawnCallback( "npc_titan", TitanConfig )
	AddSpawnCallback( "npc_drone", DroneConfig )
	AddSpawnCallback( "npc_gunship", GunshipConfig )
	AddSpawnCallback( "npc_dropship", DropshipConfig )
	AddSpawnCallback( "npc_frag_drone", TickConfig )
	AddSpawnCallback( "npc_turret_sentry", TurretConfig )

	// ai damages
	DamageUtility_EnableNPCLocationBasedDamage( true ) // modified function in sh_damage_utility.gnut. allow npcs to deal headshot damages

	// tempfix specifics
	SetShouldPlayDefaultMusic( true ) // play music when score or time reaches some point
	EarnMeterMP_SetPassiveGainProgessEnable( true ) // enable earnmeter gain progressing like vanilla
}

void function AITdmExtend_Highlight( entity ent )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( ent )

	// highlights think
	string className = ent.GetClassName()
	switch ( className )
	{
		case "npc_pilot_elite":
			ent.e.hasDefaultEnemyHighlight = true // mark them as hasDefaultHighlight, so they'll save highlights after phase shift
			Highlight_SetEnemyHighlight( ent, "enemy_player" )
			break
		case "npc_super_spectre":
		case "npc_gunship":
			ent.e.hasDefaultEnemyHighlight = true // mark them as hasDefaultHighlight, so they'll save highlights after phase shift
			Highlight_SetEnemyHighlight( ent, "enemy_titan" )
			break

		default:
			// default highlight setting
			if ( ent.IsTitan() )
				Highlight_SetEnemyHighlight( ent, "enemy_player" )
			else
				Highlight_SetEnemyHighlight( ent, "enemy_player" )
			break
	}
}

void function AITdmExtend_FriendlyHighlight( entity ent )
{
	Highlight_SetFriendlyHighlight( ent, "sp_enemy_pilot" )
	ent.Highlight_SetParam( 1, 0, < 2, 2, 2 > )
}

// used for high threat npcs such as tick
void function AITdmExtend_EnemyThreatenHighlight( entity ent )
{
	Highlight_SetEnemyHighlight( ent, "sp_enemy_pilot" )
	ent.Highlight_SetParam( 2, 0, < 2, 0, 0 > )
}

////////////////////////////////
///// NPC CONFIG FUNCTIONS /////
////////////////////////////////

// hardcoded here
const array<string> SPECIALIST_GRUNTS =
[
	"npc_soldier_shield_captain",
	"npc_soldier_pve_specialist",
	"npc_soldier_sidearm",
	"npc_soldier_pve_eliteguard",
]

const array<string> SPECIALIST_GRUNTS_RARE = // specialist class in this array will have less picking rate
[
	"npc_soldier_shield_captain",
]

void function GruntConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	// hardcoded here
	string aiSetName = soldier.GetAISettingsName()
	bool isSpecialistGrunt = SPECIALIST_GRUNTS.contains( aiSetName )
	if ( !isSpecialistGrunt ) // normal grunts
	{
		soldier.SetMaxHealth( 80 )
		soldier.SetHealth( 80 )
	}
	
	thread GruntTitleThink( soldier ) // specialist grunts may spawn from dropship, do a think here

	// grunt executions: 
	Melee_SetExecutionRefsOverride( 
		soldier, 
		// execution_face_stab_combat is a modified execution ref
		["execution_neck_snap", "execution_face_stab_combat", "execution_backshot"]
	)
}

void function GruntTitleThink( entity soldier )
{
	soldier.EndSignal( "OnDestroy" )
	soldier.EndSignal( "OnDeath" )

	float endTime = Time() + 5
	while ( Time() <= endTime )
	{
		WaitFrame()
		string aiSetName = soldier.GetAISettingsName()
		bool isSpecialistGrunt = SPECIALIST_GRUNTS.contains( aiSetName )
		if ( !isSpecialistGrunt )
			continue
		WaitFrame() // they may get a title from spawn function, we wait a frame before changing again
		soldier.SetTitle( GetMilitiaTitle() ) // funny in _ai_soldiers.gnut
		return
	}
}

void function PilotConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	// pilot executions: 
	Melee_SetExecutionRefsOverride( 
		soldier, 
		["execution_telefrag", "execution_stim", "execution_grapple", "execution_pulseblade", "execution_cloak", "execution_holopilot", "execution_ampedwall"]
	)
}

void function MarvinConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	soldier.SetMaxHealth( 300 )
	soldier.SetHealth( 300 )

	soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function ProwlerConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	// so they won't block teammates( won't work )
	// actually it's pretty fun seeing them collide with player titans
	//soldier.kv.CollisionGroup = TRACE_COLLISION_GROUP_PLAYER
	// this can fix their collision
	// no this can't!!! it crashes server immediately
	//soldier.SetHullType( "HULL_HUMAN" )

	soldier.SetMaxHealth( 350 )
	soldier.SetHealth( 350 )
}

void function SpectreConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	soldier.SetMaxHealth( 190 )
	soldier.SetHealth( 190 )

	// spectre executions: 
	Melee_SetExecutionRefsOverride( 
		soldier, 
		["execution_combo", "execution_knockout"]
	)
}

void function StalkerConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	soldier.SetMaxHealth( 350 ) // they gets disarmed by shooting weakpoint though
	soldier.SetHealth( 350 )
}

void function ReaperConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	// even stronger
	soldier.SetMaxHealth( 5000 ) // was 5500, we have 2 reapers now...
	soldier.SetHealth( 5000 )
}

void function TitanConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )
}

void function DroneConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )
}

void function GunshipConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	// lower health since they'll become noTarget
	soldier.SetMaxHealth( 5500 )
	soldier.SetHealth( 5500 )

	//soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function DropshipConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	soldier.SetNoTarget( true ) // don't want other npcs targeting them
}

void function TickConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )

	// enemy highlight
	AITdmExtend_EnemyThreatenHighlight( soldier )
}

void function TurretConfig( entity soldier )
{
	// friendly highlight
	AITdmExtend_FriendlyHighlight( soldier )
}

////////////////////////////////////
///// NPC CONFIG FUNCTIONS END /////
////////////////////////////////////



//////////////////////////////////////////
///// EXTRASPAWNER SETTINGS FUNCTION /////
//////////////////////////////////////////

void function InitExtraSpawnerSettings()
{
	ExtraSpawner_SetNPCWeapons( "npc_soldier", ["mp_weapon_rspn101", "mp_weapon_lmg", "mp_weapon_shotgun", "mp_weapon_r97", "mp_weapon_dmr"] )
	ExtraSpawner_SetNPCAntiTitanWeapons( "npc_soldier", ["mp_weapon_rocket_launcher", "mp_weapon_mgl"] )
	ExtraSpawner_SetNPCGrenadeWeapons( "npc_soldier", ["mp_weapon_frag_grenade", "mp_weapon_thermite_grenade", "mp_weapon_grenade_electric_smoke", "mp_weapon_grenade_emp"] )
	// nerf dmr damage cause we enabled npc headshots, increase archer damage against titans
	ExtraSpawner_SetNPCExtraWeaponMods( "npc_soldier", ["npc_lower_damage", "multiplayer_npc_launcher"] )

	ExtraSpawner_SetNPCWeapons( "npc_spectre", ["mp_weapon_mastiff", "mp_weapon_doubletake", "mp_weapon_hemlok_smg", "mp_weapon_hemlok"] )
	// removed arc launcher cuz they're bit too powerful
	ExtraSpawner_SetNPCAntiTitanWeapons( "npc_spectre", ["mp_weapon_mgl", "mp_weapon_defender"] )
	// spectres don't throw grenades, just keep here
	//ExtraSpawner_SetNPCGrenadeWeapons( "npc_spectre", ["mp_weapon_frag_grenade", "mp_weapon_grenade_emp", "mp_weapon_grenade_gravity"] )

	ExtraSpawner_SetNPCWeapons( "npc_pilot_elite", ["mp_weapon_rspn101_og", "mp_weapon_r97", "mp_weapon_car", "mp_weapon_hemlok_smg", "mp_weapon_hemlok", "mp_weapon_g2", "mp_weapon_vinson"] )
	ExtraSpawner_SetNPCAntiTitanWeapons( "npc_pilot_elite", ["mp_weapon_rocket_launcher", "mp_weapon_mgl", "mp_weapon_arc_launcher", "mp_weapon_defender"] )
	ExtraSpawner_SetNPCGrenadeWeapons( "npc_pilot_elite", ["mp_weapon_frag_grenade", "mp_weapon_thermite_grenade", "mp_weapon_grenade_emp", "mp_weapon_grenade_gravity"] )
	// increase archer damage against titans
	ExtraSpawner_SetNPCExtraWeaponMods( "npc_pilot_elite", ["multiplayer_npc_launcher"] )

	// npcs can't shoot "mp_weapon_pulse_lmg"
	ExtraSpawner_SetNPCWeapons( "npc_stalker", ["mp_weapon_softball", "mp_weapon_smr", "mp_weapon_epg"] )
	// should I just remove AT weapons for stalkers cuz they're using grenadier?
	//ExtraSpawner_SetNPCAntiTitanWeapons( "npc_stalker", ["mp_weapon_mgl", "mp_weapon_arc_launcher", "mp_weapon_defender"] )
	// balanced epg for multiplayer
	ExtraSpawner_SetNPCExtraWeaponMods( "npc_stalker", ["multiplayer_npc_grenadier"] )

	//AiDrone_SetDroneSpawnedByNPCRandomType( true ) // modified function in _ai_drone.nut, specialist grunts will spawn random drones
	//AiDrone_SetDroneSpawnedByNPCForceDie( true ) // modified function in _ai_drone.nut, drones spawned by npcs will be destroyed right after it's owner's death

	Wallrun_EnableProtectionForRodeoPlayerAgainstNPCs( false ) // modified function in class_wallrun.gnut. disable damage immune against npcs while rodeoing
}

//////////////////////////////////////////////
///// EXTRASPAWNER SETTINGS FUNCTION END /////
//////////////////////////////////////////////

void function SetUpAITdmExtendedScoreEvent()
{
	// pilot kill
	ScoreEvent_SetEarnMeterValues( "KillPilot", 0.10, 0.05 )
	ScoreEvent_SetEarnMeterValues( "EliminatePilot", 0.10, 0.05 )
	ScoreEvent_SetEarnMeterValues( "PilotAssist", 0.03, 0.021, 0.0 ) // if set to "0.03, 0.02", will display as "4%"
	// titan kill
	ScoreEvent_SetEarnMeterValues( "DoomTitan", 0.0, 0.0 )
	// don't know why auto titan kills appear to be no value in vanilla
	// even when the titan have an owner player
	ScoreEvent_SetEarnMeterValues( "KillTitan", 0.20, 0.10, 0.0 )
	ScoreEvent_SetEarnMeterValues( "KillAutoTitan", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "EliminateTitan", 0.20, 0.10, 0.0 )
	ScoreEvent_SetEarnMeterValues( "EliminateAutoTitan", 0.0, 0.0 )
	ScoreEvent_SetEarnMeterValues( "TitanKillTitan", 0.0, 0.0 )
	// but titan assist do have earn values...
	ScoreEvent_SetEarnMeterValues( "TitanAssist", 0.10, 0.10 )
	// rodeo
	ScoreEvent_SetEarnMeterValues( "PilotBatteryStolen", 0.0, 0.35, 0.0 )
	ScoreEvent_SetEarnMeterValues( "PilotBatteryApplied", 0.0, 0.35, 0.0 )
	// special method of killing
	ScoreEvent_SetEarnMeterValues( "Headshot", 0.0, 0.02, 0.0 )
	ScoreEvent_SetEarnMeterValues( "FirstStrike", 0.03, 0.021, 0.0 ) // if set to "0.03, 0.02", will display as "4%"
	
	// ai
	ScoreEvent_SetEarnMeterValues( "KillGrunt", 0.02, 0.02, 0.5 )
	ScoreEvent_SetEarnMeterValues( "KillSpectre", 0.02, 0.02, 0.5 )
	ScoreEvent_SetEarnMeterValues( "LeechSpectre", 0.02, 0.02, 0.5 )
	ScoreEvent_SetEarnMeterValues( "KillHackedSpectre", 0.02, 0.02, 0.5 )
	ScoreEvent_SetEarnMeterValues( "KillStalker", 0.02, 0.02, 0.5 )
	ScoreEvent_SetEarnMeterValues( "KillSuperSpectre", 0.10, 0.10, 0.5 )
	ScoreEvent_SetEarnMeterValues( "KillLightTurret", 0.05, 0.05 )
	// ai(extended)
	ScoreEvent_SetEarnMeterValues( "KillProwler", 0.02, 0.02, 0.5 )
	ScoreEvent_SetEarnMeterValues( "KillDrone", 0.01, 0.01 )
}

//------------------------------------------------------

void function OnPrematchStart()
{
    InitExtraSpawnerSettings() // npc weapon settings or something...

	// don't run spawning code if ains and nms aren't up to date
	if ( GetAINScriptVersion() == AIN_REV && GetNodeCount() != 0 )
	{
		thread SpawnIntroBatch( TEAM_IMC )
		thread SpawnIntroBatch( TEAM_MILITIA )
	}

	// Starts skyshow, this also requiers AINs but doesn't crash if they're missing
	if ( !Flag( "LevelHasRoof" ) )
		thread StratonHornetDogfightsIntense()
}

void function OnPlaying()
{
	// cleaning up
	CleanUpOverloadedTicks()
	TryCleanupBoredNPCGameLong()
}

void function OnPlayerConnected( entity player )
{
	Remote_CallFunction_NonReplay( player, "ServerCallback_AITDM_OnPlayerConnected" )
}

//------------------------------------------------------

void function HandleScoreForPlayerOrNPCKill( entity victim, entity attacker, var damageInfo )
{
	// if victim is a non-titan npc that owned by players, don't add score
	if ( !VictimIsValidForAITdmScore( victim ) )
		return
	
	if ( !AttackerIsValidForAITdmScore( victim, attacker, damageInfo ) )
		return

	// if it's a npc with bossplayer/owner...
	if ( attacker.IsNPC() )
	{
		// reassign attacker
		attacker = GetAITdmAttackOwner( attacker )
	}

	string className = victim.GetClassName()
	int scoreToAdd = 0
	string scoreEvent = "" // for npcs can't handle by OnNPCKilled(), do a extra score event

	if ( victim.IsPlayer() )
		scoreToAdd = PLAYER_SCORE_AMOUNT

	if ( className == "npc_pilot_elite" )
	{
		scoreToAdd = PILOT_SCORE_AMOUNT
		scoreEvent = "EliminatePilot"
		// we can't add a obitary for npc pilots since OBITUARY_ENABLED_NPC is false
	}

	if ( className == "npc_gunship" )
		scoreToAdd = GUNSHIP_SCORE_AMOUNT

	if ( className == "npc_marvin" )
		scoreToAdd = MARVIN_SCORE_AMOUNT

	if ( className == "npc_prowler" )
	{
		// hardcoded here: if it's a small prowler we add less score
		if ( float( victim.kv.modelscale ) < 1.0 )
			scoreToAdd = SMALL_PROWLER_SCORE_AMOUNT
		else
			scoreToAdd = PROWLER_SCORE_AMOUNT
	}

	if ( className == "npc_spectre" )
		scoreToAdd = SPECTRE_SCORE_AMOUNT

	if ( className == "npc_stalker" )
		scoreToAdd = STALKER_SCORE_AMOUNT

	if ( className == "npc_super_spectre" )
		scoreToAdd = REAPER_SCORE_AMOUNT

	if ( className == "npc_soldier" )
	{
		if ( SPECIALIST_GRUNTS.contains( victim.GetAISettingsName() ) )
			scoreToAdd = SPECIALIST_GRUNT_SCORE_AMOUNT
		else
			scoreToAdd = GRUNT_SCORE_AMOUNT
	}
	
	if ( className == "npc_drone" )
		scoreToAdd = DRONE_SCORE_AMOUNT

	// Player ejecting triggers this without the extra check
	if ( victim.IsTitan() && victim.GetBossPlayer() != attacker )
	{
		if ( TitanHasNpcPilot( victim ) ) // pilot was killed without ejecting
		{
			scoreToAdd = TITAN_SCORE_AMOUNT + PILOT_SCORE_AMOUNT
			scoreEvent = "EliminatePilot"
		}
		else if ( victim.IsPlayer() ) // fix for player score!
			scoreToAdd = TITAN_SCORE_AMOUNT + PLAYER_SCORE_AMOUNT
		else // ejecting auto titan
			scoreToAdd = TITAN_SCORE_AMOUNT

		// modified function in _titan_health.gnut, recovering ttf1 behavior: we add score on doom but not on death for health loss titans
		if ( !TitanHealth_GetSoulInfiniteDoomedState( victim.GetTitanSoul() ) )
			scoreToAdd -= TITAN_SCORE_AMOUNT // remove titan score on kill for doomed health loss titans

		// obit, has been fixed in _score.gnut
		//foreach ( entity player in GetPlayerArray() )
		//	Remote_CallFunction_NonReplay( player, "ServerCallback_OnTitanKilled", attacker.GetEncodedEHandle(), victim.GetEncodedEHandle(), DamageInfo_GetCustomDamageType( damageInfo ), DamageInfo_GetDamageSourceIdentifier( damageInfo ) )
	}

	if ( scoreToAdd > 0 )
		AddAITdmTeamScore( attacker, scoreToAdd ) // this can handle both players' and npcs' kills
	if( attacker.IsPlayer() ) // specific for players
	{
		if ( scoreEvent != "" )
			AddPlayerScore( attacker, scoreEvent, victim )
	}
}

bool function AttackerIsValidForAITdmScore( entity victim, entity attacker, var damageInfo )
{
	if( !IsValid( attacker ) )
		return false
	
	if( !attacker.IsNPC() && !attacker.IsPlayer() ) // not killed by any combat character
		return false

	if ( attacker == victim ) // suicide!
		return false

	// all checks passed
	return true
}

bool function VictimIsValidForAITdmScore( entity victim )
{
	// if victim is a non-titan npc that owned by players, don't add score
	if ( victim.IsNPC() && !victim.IsTitan() )
	{
		entity bossPlayer = victim.GetBossPlayer()
		entity owner = victim.GetOwner()
		if ( IsValid( bossPlayer ) )
		{
			if ( bossPlayer.IsPlayer() )
				return false
		}
		if ( IsValid( owner ) )
		{
			if ( owner.IsPlayer() )
				return false
		}
	}

	// all checks passed
	return true
}

entity function GetAITdmAttackOwner( entity ent )
{
	entity attacker
	if ( ent.IsPlayer() ) // player always use themselves as attacker
		return ent
	if ( IsValid( ent.GetBossPlayer() ) )
		attacker = ent.GetBossPlayer()
	if ( IsValid( ent.GetOwner() ) )
		attacker = ent.GetOwner()
	// attacker still not valid?
	if ( !IsValid( attacker ) )
		return ent // use npc or something itself
	return attacker
}

void function AddAITdmTeamScore( entity ent, int score )
{
	// Add score + update network int to trigger the "Score +n" popup
	AddTeamScore( ent.GetTeam(), score )
	if ( ent.IsPlayer() )
	{
		ent.AddToPlayerGameStat( PGS_ASSAULT_SCORE, score )
		ent.SetPlayerNetInt( "AT_bonusPoints", ent.GetPlayerGameStat( PGS_ASSAULT_SCORE ) )
	}
}

// for handling doomed health loss titans
void function HandleTitanDoomedScore( entity victim, var damageInfo, bool firstDoom )
{
	// if victim is a non-titan npc that owned by players, don't add score
	if ( !VictimIsValidForAITdmScore( victim ) )
		return
	
	if ( !firstDoom ) // only add score on first doom
		return

	entity attacker = DamageInfo_GetAttacker( damageInfo )
	if ( !AttackerIsValidForAITdmScore( victim, attacker, damageInfo ) )
		return

	// if it's a npc with bossplayer/owner...
	if ( attacker.IsNPC() )
	{
		// reassign attacker
		attacker = GetAITdmAttackOwner( attacker )
	}

	if ( !TitanHealth_GetSoulInfiniteDoomedState( victim.GetTitanSoul() ) )
		AddAITdmTeamScore( attacker, TITAN_SCORE_AMOUNT )
}

//------------------------------------------------------

// CHECK FUNCTIONS

bool function ShouldSpawnSpecialistSquad( string otherSpawnWith = "" )
{
	// never spawn specialist grunt with stalkers
	// stalkers are slow and they've already got pretty high health and damage
	if ( otherSpawnWith == "npc_stalker" )
		return false
	// removed. to make game more chaotic, always spawn specialist squad
	//return RandomInt( 3 ) > 0 // 66% chance of spawning a specialist squad(??
	return true
}

bool function ShouldSpawnDropship()
{
	array<entity> points = GetZiplineDropshipSpawns()
	if ( points.len() <= 4 ) // must have more than 4 points
		return false

	return RandomInt( 3 ) == 0 // 33% chance of choose to spawn a dropship
}

string function GetSpecialistGruntLeader()
{
	// 15% chance of spawning a rare specialist grunt
	bool spawnRareSpecialist = RandomIntRange( 1, 100 ) <= 15
	string leaderSet = "npc_soldier_pve_specialist"
	if ( spawnRareSpecialist )
		leaderSet = SPECIALIST_GRUNTS_RARE[ RandomInt( SPECIALIST_GRUNTS_RARE.len() ) ]
	else
	{
		array<string> genericSpecialist
		foreach ( aiSet in SPECIALIST_GRUNTS )
		{
			if ( !SPECIALIST_GRUNTS_RARE.contains( aiSet ) )
				genericSpecialist.append( aiSet )
		}
		leaderSet = genericSpecialist[ RandomInt( genericSpecialist.len() ) ]
	}

	//print( "leaderAiSet: " + leaderSet )

	return leaderSet
}

int function GetSpecialistLeaderHealth( int team, string otherSpawnWith )
{
	int index = team == TEAM_MILITIA ? 0 : 1
	return 200 + ( 60 * file.podEntities[ index ].find( otherSpawnWith ) )
}

bool function ShouldSpawnBossTitan()
{
	return RandomInt( 5 ) == 0 // boss titans has 20% chance to spawn
}

string function GetBossTitanSpawnName( int team )
{
	// team specific
	if ( team == TEAM_IMC )
	{
		const array<string> imcBossList =
		[
			"slone",
			"ash",
			"richter",
			"kane",
			"blisk",
			"viper",
		]
		return imcBossList[ RandomInt( imcBossList.len() ) ]
	}
	else if ( team == TEAM_MILITIA )
	{
		const array<string> mltBossList =
		[
			"jack",
			"sarah",
			//"sarah_monarch",
		]
		return mltBossList[ RandomInt( mltBossList.len() ) ]
	}

	// default case
	return "" // empty string means random
}

bool function ReachedPlayerCheckAmount()
{
	int maxPlayers = GetCurrentPlaylistVarInt( "max_players", 16 )
	if ( float ( GetPlayerArray().len() ) >= float ( maxPlayers ) * 0.6 )
		return true
	return false
}

//


void function SpawnIntroBatch( int team )
{
	array<entity> dropPodNodes = GetEntArrayByClass_Expensive( "info_spawnpoint_droppod_start" )
	array<entity> dropShipNodes = GetValidIntroDropShipSpawn( dropPodNodes )  
	
	array<entity> podNodes
	
	array<entity> shipNodes
	
	
	// mp_rise has weird droppod_start nodes, this gets around it
	// To be more specific the teams aren't setup and some nodes are scattered in narnia
	if( GetMapName() == "mp_rise" )
	{
		entity spawnPoint
		
		// Get a spawnpoint for team
		foreach ( point in GetEntArrayByClass_Expensive( "info_spawnpoint_dropship_start" ) )
		{
			if ( point.HasKey( "gamemode_tdm" ) )
				if ( point.kv[ "gamemode_tdm" ] == "0" )
					continue
			
			if ( point.GetTeam() == team )
			{
				spawnPoint = point
				break
			}
		}
		
		// Get nodes close enough to team spawnpoint
		foreach ( node in dropPodNodes )
		{
			if ( node.HasKey("teamnum") && Distance2D( node.GetOrigin(), spawnPoint.GetOrigin()) < 2000 )
				podNodes.append( node )
		}
	}
	else
	{
		// Sort per team
		foreach ( node in dropPodNodes )
		{
			if ( node.GetTeam() == team )
				podNodes.append( node )
		}
	}

	shipNodes = GetValidIntroDropShipSpawn( podNodes )

	// calculate intro spawn delay
	float introLength = ClassicMP_GetIntroLength()
	float introSpawnRequiredTime = expect float( GetDropPodAnimDuration() )

	float introSpawnWait = introLength - introSpawnRequiredTime
	if ( introSpawnWait > 0 )
		wait introSpawnWait

	// Spawn logic
	int startIndex = 0
	bool first = true
	entity node
	string introSpawnClass = "npc_soldier"
	
	int pods = RandomInt( podNodes.len() + 1 )
	
	int ships = shipNodes.len()
	bool spawnSucceeded = false

	for ( int i = 0; i < SQUADS_PER_TEAM; i++ )
	{
		if ( ( pods != 0 || ships == 0 ) && podNodes.len() > 0 ) // defensive fix for podNodes can sometimes be 0
		{
			spawnSucceeded = true // mark as we've done intro spawn, we'll wait before game-loop-spawn
			int index = i
			
			if ( index > podNodes.len() - 1 )
				index = RandomInt( podNodes.len() )
			
			node = podNodes[ index ]
			if ( ShouldSpawnSpecialistSquad( introSpawnClass ) )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				string leaderSet = GetSpecialistGruntLeader()
				int leaderHealth = GetSpecialistLeaderHealth( team, introSpawnClass )
				thread ExtraSpawner_SpawnSpecialistGruntDropPod( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, leaderSet, leaderHealth )
			}
			else
				thread ExtraSpawner_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, introSpawnClass )

			pods--
		}
		else if ( shipNodes.len() > 0 ) // defensive fix for shipNodes can sometimes be 0
		{
			spawnSucceeded = true // mark as we've done intro spawn, we'll wait before game-loop-spawn
			if ( startIndex == 0 ) 
				startIndex = i // save where we started
			
			node = shipNodes[ i - startIndex ]
			if ( ShouldSpawnSpecialistSquad( introSpawnClass ) )
			{
				array< entity > points = GetZiplineDropshipSpawns()
				string leaderSet = GetSpecialistGruntLeader()
				int leaderHealth = GetSpecialistLeaderHealth( team, introSpawnClass )
				thread ExtraSpawner_SpawnSpecialistGruntDropShip( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, 4, leaderSet, leaderHealth )
			}
			else
				thread ExtraSpawner_SpawnDropShip( node.GetOrigin(), node.GetAngles(), team, introSpawnClass, 4 )
			
			ships--
		}
		
		// Vanilla has a delay after first spawn
		if ( first )
			wait 2
		
		first = false
	}

	// do wait before looping spawn starts if we did intro spawn
	if ( spawnSucceeded )
		wait 8.0
	
	// intro spawn finished
	thread SpawnEscalator( team ) // handles team Escalate()
	thread SpawnerSquads( team )
	thread SpawnerHeavyArmor( team )
	thread SpawnerNPCs( team )
}

// Populates the match
void function SpawnEscalator( int team )
{
	int index = team == TEAM_MILITIA ? 0 : 1

	// handle prematch spawns
	while( GetGameState() == eGameState.Prematch || GetGameState() == eGameState.Playing )
	{
		WaitFrame() // wait a frame each loop

		Escalate( team )
	}
}

void function SpawnerSquads( int team )
{
	int index = team == TEAM_MILITIA ? 0 : 1

	// handle prematch spawns
	while( GetGameState() == eGameState.Prematch || GetGameState() == eGameState.Playing )
	{
		WaitFrame() // wait a frame each loop

		// TODO: this should possibly not count scripted npc spawns, probably only the ones spawned by this script
		int infantryCount = 0
		foreach ( entity npc in GetNPCArrayOfTeam( team ) )
		{
			if ( IsHumanSized( npc ) && !IsValid( npc.GetBossPlayer() ) )
				infantryCount += 1
		}
		int prowlerCount = GetNPCArrayEx( "npc_prowler", team, -1, <0,0,0>, -1 ).len()

		// NORMAL SPAWNS
		int maxSquads = SQUADS_PER_TEAM
		//if ( ReachedPlayerCheckAmount() && file.reapers[ index ] ) // if we have pretty much players and reached reaper level
		//	maxSquads = SQUADS_PER_TEAM_MORE_PLAYERS // do reduced minions count
		if ( file.reapers[ index ] )
			maxSquads = SQUADS_PER_TEAM_HIGH_LEVEL
		
		int squadsToSpawn = ( maxSquads * SQUAD_SIZE - 2 - infantryCount ) / SQUAD_SIZE
		if ( squadsToSpawn > 0 )
		{
			for ( int i = 0; i < squadsToSpawn; i++ )
			{
				if ( i > 0 )
					wait 2.0 // delay before next spawn
				
				array<entity> dropshipPoints = GetZiplineDropshipSpawns()
				array<entity> droppodPoints = SpawnPoints_GetDropPod()
				string ent = file.podEntities[ index ][ RandomInt( file.podEntities[ index ].len() ) ]

				if ( ShouldSpawnSpecialistSquad( ent ) )
				{
					string leaderSet = GetSpecialistGruntLeader()
					// add health depending on what npc it spawning with
					int leaderHealth = GetSpecialistLeaderHealth( team, ent )
					//print( "RUNNING ExtraSpawner_SpawnSpecialistGruntDropPod()" )
					//print( "leaderHealth is: " + string( leaderHealth ) )
					if ( ShouldSpawnDropship() )
					{
						entity node = dropshipPoints[ GetSpawnPointIndex( dropshipPoints, team ) ]
						thread ExtraSpawner_SpawnSpecialistGruntDropShip( node.GetOrigin(), node.GetAngles(), team, "npc_soldier", 4, leaderSet, leaderHealth )
						continue
					}
					
					entity node = droppodPoints[ GetSpawnPointIndex( droppodPoints, team ) ]
					thread ExtraSpawner_SpawnSpecialistGruntDropPod( node.GetOrigin(), node.GetAngles(), team, ent, leaderSet, leaderHealth )
				}
				else
				{
					if ( ShouldSpawnDropship() )
					{
						entity node = dropshipPoints[ GetSpawnPointIndex( dropshipPoints, team ) ]
						thread ExtraSpawner_SpawnDropShip( node.GetOrigin(), node.GetAngles(), team, ent, 4 )
						continue
					}

					entity node = droppodPoints[ GetSpawnPointIndex( droppodPoints, team ) ]
					thread ExtraSpawner_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, ent )
				}
			}

			wait 8.0 // wait after each spawn wave
		}

		// PROWLER SQUADS
		if ( file.prowlers[ index ] )
		{
			//print( "prowlerCount: " + string( prowlerCount ) )
			int squadsToSpawn = ( PROWLER_SQUADS_PER_TEAM * 4 - 2 - prowlerCount ) / 4
			if ( squadsToSpawn > 0 )
			{
				for ( int i = 0; i < squadsToSpawn; i++ )
				{
					if ( i > 0 )
						wait 2.0 // delay before next spawn
					
					array< entity > points = SpawnPoints_GetDropPod()
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					//print( "RUNNING ExtraSpawner_SpawnProwlerSquadDropPod()" )
					thread ExtraSpawner_SpawnProwlerSquadDropPod( node.GetOrigin(), node.GetAngles(), team )
				}

				wait 8.0 // wait after each spawn wave
			}
		}
	}
}

void function SpawnerHeavyArmor( int team )
{
	int index = team == TEAM_MILITIA ? 0 : 1

	// handle prematch spawns
	while( GetGameState() == eGameState.Prematch || GetGameState() == eGameState.Playing )
	{
		WaitFrame() // wait a frame each loop

		int reaperCount = GetNPCArrayEx( "npc_super_spectre", team, -1, <0,0,0>, -1 ).len()
		int gunshipCount = GetNPCArrayEx( "npc_gunship", team, -1, <0,0,0>, -1 ).len()
		int titanCount = 0
		foreach ( entity npc in GetNPCArrayEx( "npc_titan", team, -1, <0,0,0>, -1 ) )
		{
			if ( !IsValid( npc.GetBossPlayer() ) )
				titanCount += 1
		}

		// REAPERS
		if ( file.reapers[ index ] )
		{
			int reapersToSpawn = REAPERS_PER_TEAM - reaperCount
			if ( reapersToSpawn > 0 )
			{
				for ( int i = 0; i < reapersToSpawn; i++ )
				{
					if ( i > 0 )
						wait 2.0 // delay before next spawn

					array<entity> points = SpawnPoints_GetTitan()
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					//thread AiGameModes_SpawnReaper( node.GetOrigin(), node.GetAngles(), team, "npc_super_spectre_aitdm", ReaperHandler )
					// crazy reaper
					string reaperSettings = "npc_super_spectre_aitdm"
					string tickSettings = "npc_frag_drone"
					if ( CoinFlip() ) // 50% change of spawning sp ticks, 50% chance spawning mp ticks
						tickSettings = "npc_frag_drone_throwable"
					
					thread ExtraSpawner_SpawnReaperCanLaunchTicks( node.GetOrigin(), node.GetAngles(), team, reaperSettings, tickSettings )
				}

				wait 8.0 // wait after each spawn wave
			}
		}

		// GUNSHIPS
		if ( file.gunships[ index ] )
		{
			int gunshipsToSpawn = GUNSHIPS_PER_TEAM - gunshipCount
			if ( gunshipsToSpawn > 0 )
			{
				for ( int i = 0; i < gunshipsToSpawn; i++ )
				{
					if ( i > 0 )
						wait 2.0 // delay before next spawn
					
					array< entity > points = SpawnPoints_GetDropPod()
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					thread ExtraSpawner_SpawnGunShip( node.GetOrigin(), node.GetAngles(), team )
				}

				wait 8.0 // wait after each spawn wave
			}
		}

		// TITANS
		if ( file.titans[ index ] )
		{
			int titansToSpawn = TITANS_PER_TEAM - titanCount
			if ( titansToSpawn > 0 )
			{
				for ( int i = 0; i < titansToSpawn; i++ )
				{
					if ( i > 0 )
						wait 2.0 // delay before next spawn
					
					array< entity > points = SpawnPoints_GetDropPod()
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					thread ExtraSpawner_SpawnTitan( node.GetOrigin(), node.GetAngles(), team, true )
				}

				wait 8.0 // wait after each spawn wave
			}
		}

		// PILOTS
		if ( file.pilots[ index ] )
		{
			int pilotsToSpawn = PILOTS_PER_TEAM - titanCount // count titans
			if ( pilotsToSpawn > 0 )
			{
				for ( int i = 0; i < pilotsToSpawn; i++ )
				{
					if ( i > 0 )
						wait 2.0 // delay before next spawn
					
					array< entity > points
					points.extend( SpawnPoints_GetTitanStart( TEAM_IMC ) )
					points.extend( SpawnPoints_GetTitanStart( TEAM_MILITIA ) )
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					//entity titan = AiGameModes_SpawnTitanRandom( node.GetOrigin(), node.GetAngles(), team )
					if ( ShouldSpawnBossTitan() ) 
					{
						string spawnName = GetBossTitanSpawnName( -1 ) // get bosstitan spawn name without team check
						thread ExtraSpawner_SpawnBossTitan( node.GetOrigin(), node.GetAngles(), team, spawnName )
					}
					else
						thread ExtraSpawner_SpawnPilotCanEmbark( node.GetOrigin(), node.GetAngles(), team )
				}

				wait 8.0 // wait after each spawn wave
			}
		}
	}
}

void function SpawnerNPCs( int team )
{
	int index = team == TEAM_MILITIA ? 0 : 1

	// handle prematch spawns
	while( GetGameState() == eGameState.Prematch || GetGameState() == eGameState.Playing )
	{
		WaitFrame() // wait a frame each loop

		int marvinCount = GetNPCArrayEx( "npc_marvin", team, -1, <0,0,0>, -1 ).len()
		int prowlerCount = GetNPCArrayEx( "npc_prowler", team, -1, <0,0,0>, -1 ).len()

		// MARVINS
		if ( file.marvins[ index ] )
		{
			const int spawnAmount = 2 // spawn 2 marvins per droppod
			const string spawnEnt = "npc_marvin"
			int marvinsToSpawn = ( MARVINS_PER_TEAM * spawnAmount - 1 - marvinCount ) / spawnAmount
			if ( marvinsToSpawn > 0 )
			{
				for ( int i = 0; i < marvinsToSpawn; i++ )
				{
					if ( i > 0 )
						wait 2.0 // delay before next spawn
					
					array< entity > points = SpawnPoints_GetDropPod()
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					//thread AiGameModes_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, spawnEnt )
					thread ExtraSpawner_SpawnNPCInDropPod( node.GetOrigin(), node.GetAngles(), team, spawnEnt, spawnAmount )
				}

				wait 8.0 // wait after each spawn wave
			}
		}

		// PROWLERS
		if ( file.prowlers[ index ] )
		{
			const int spawnAmount = 1 // spawn 1 prowler per droppod
			const string spawnEnt = "npc_prowler"
			int prowlersToSpawn = ( PROWLERS_PER_TEAM * spawnAmount - 1 - prowlerCount ) / spawnAmount
			if ( prowlersToSpawn > 0 )
			{
				for ( int i = 0; i < prowlersToSpawn; i++ )
				{
					if ( i > 0 )
						wait 2.0 // delay before next spawn

					array< entity > points = SpawnPoints_GetDropPod()
					entity node = points[ GetSpawnPointIndex( points, team ) ]
					//thread AiGameModes_SpawnDropPod( node.GetOrigin(), node.GetAngles(), team, spawnEnt )
					thread ExtraSpawner_SpawnNPCInDropPod( node.GetOrigin(), node.GetAngles(), team, spawnEnt, spawnAmount )
				}

				wait 8.0 // wait after each spawn wave
			}
		}
	}
}

// Based on points tries to balance match
void function Escalate( int team )
{
	int score = GameRules_GetTeamScore( team )
	int index = team == TEAM_MILITIA ? 1 : 0
	// This does the "Enemy x incoming" text
	string defcon = team == TEAM_MILITIA ? "IMCdefcon" : "MILdefcon"

	if ( score < file.levels[ index ] )
		return

	switch ( file.levels[ index ] )
	{
		case LEVEL_SPECTRES:
			file.levels[ index ] = LEVEL_STALKERS
			file.marvins[ index ] = true
			file.podEntities[ index ].append( "npc_spectre" )
			SetGlobalNetInt( defcon, 2 )
			return

		case LEVEL_STALKERS:
			file.levels[ index ] = LEVEL_REAPERS
			file.marvins[ index ] = false
			file.prowlers[ index ] = true
			file.podEntities[ index ].append( "npc_stalker" )
			SetGlobalNetInt( defcon, 3 )
			return

		case LEVEL_REAPERS:
			file.levels[ index ] = LEVEL_GUNSHIPS
			file.reapers[ index ] = true
			SetGlobalNetInt( defcon, 4 )
			return

        case LEVEL_GUNSHIPS:
			file.levels[ index ] = LEVEL_TITANS
			file.gunships[ index ] = true
			SetGlobalNetInt( defcon, 5 )
			return

		case LEVEL_TITANS:
			file.levels[ index ] = 9999
			file.prowlers[ index ] = false
			file.pilots[ index ] = true
			file.titans[ index ] = true
			SetGlobalNetInt( defcon, 6 )
			return
	}

	// why we have to run into unreachable?
	//unreachable // hopefully
}

//------------------------------------------------------

int function GetSpawnPointIndex( array< entity > points, int team )
{
	entity zone = DecideSpawnZone_Generic( points, team )

	if ( IsValid( zone ) )
	{
		// 20 Tries to get a random point close to the zone
		for ( int i = 0; i < 20; i++ )
		{
			int index = RandomInt( points.len() )

			if ( Distance2D( points[ index ].GetOrigin(), zone.GetOrigin() ) < 6000 )
				return index
		}
	}

	return RandomInt( points.len() )
}

//------------------------------------------------------

// Award for hacking
void function OnSpectreLeeched( entity spectre, entity player )
{
	// Set Owner so we can filter in HandleScore
	// not a good idea. score could be handled by GetBossPlayer()
	// setting an owner will make entity have no collision with their owner
	//spectre.SetOwner( player )
	spectre.ai.preventOwnerDamage = true // this is required so we don't kill our spectres
	// Add score + update network int to trigger the "Score +n" popup
	AddAITdmTeamScore( player, 1 )
}

// ticks clean up
void function CleanUpOverloadedTicks()
{
	thread CleanUpOverloadedTicks_Threaded()
}

void function CleanUpOverloadedTicks_Threaded()
{
	array<entity> tickArray = GetNPCArrayByClass( "npc_frag_drone" )
	int maxTicks = REAPERS_PER_TEAM * 4 + 2
	while ( true )
	{
		if( tickArray.len() > maxTicks ) // clean up ticks spawned by reapers
		{
			if ( IsAlive( tickArray[0] ) )
				tickArray[0].Die() // this may kill somebody lol
		}
		WaitFrame()
	}
}

// npc clean up
void function TryCleanupBoredNPCGameLong()
{
	thread TryCleanupBoredNPCGameLong_Threaded()
}

void function TryCleanupBoredNPCGameLong_Threaded()
{
	// keep searching new npcs and run CleanupBoredNPCThread() for them
	while ( true )
	{
		foreach ( entity npc in GetNPCArray() )
		{
			if ( !( "waitingToBeCleanUp" in npc.s ) )
				npc.s.waitingToBeCleanUp <- false
			if ( !npc.s.waitingToBeCleanUp )
			{
				thread CleanupBoredNPCThread( npc )
				npc.s.waitingToBeCleanUp = true
			}
		}
		WaitFrame()
	}
}

// npc cleanup
const float NPC_CLEANUP_INITIAL_WAIT_TIME = 10.0
const float NPC_CLEANUP_REQUIRED_IDLE_TIME = 20.0

void function CleanupBoredNPCThread( entity guy )
{
	// track all ai that we spawn, ensure that they're never "bored" (i.e. stuck by themselves doing fuckall with nobody to see them) for too long
	// if they are, kill them so we can free up slots for more ai to spawn
	// we shouldn't ever kill ai if players would notice them die

	// NOTE: this partially covers up for the fact that we script ai alot less than vanilla probably does
	// vanilla probably messes more with making ai assaultpoint to fights when inactive and stuff like that, we don't do this so much

	if ( guy.GetClassName() == "npc_marvin" ) // never clean up marvins
		return
	guy.EndSignal( "OnDestroy" )
	// cover spawning time from dropship/pod + before we start cleaning up
	WaitFrame()
	while ( IsValid( guy.GetParent() ) )
		WaitFrame()

	wait NPC_CLEANUP_INITIAL_WAIT_TIME // initial wait
	int team = guy.GetTeam()
	vector lastCheckOrigin = guy.GetOrigin() // if they get stucked we also clean up
	float idleDuration = 0.0
	while ( idleDuration < NPC_CLEANUP_REQUIRED_IDLE_TIME )
	{
		WaitFrame()

		if ( guy.Anim_IsActive() ) // anim active, such as marvin doing a job or npc being executed
			continue

		// if the npc is owner by player, we skip checks
		entity owner = guy.GetOwner()
		entity bossPlayer = guy.GetBossPlayer()
		if ( IsValid( owner ) )
		{
			if ( owner.IsPlayer() )
				continue
		}
		if ( IsValid( bossPlayer ) )
		{
			if ( bossPlayer.IsPlayer() )
				continue
		}

		// if npc is a titan with bubbleshield, we skip checks
		if ( guy.IsTitan() )
		{
			entity soul = guy.GetTitanSoul()
			if( IsValid( soul ) )
			{
				entity bubbleShield = soul.soul.bubbleShield
				if ( IsValid( bubbleShield ) )
					continue
			}
		}

		array<entity> otherGuys = GetPlayerArray()
		otherGuys.extend( GetNPCArrayOfEnemies( team ) )

		bool failedChecks = false

		foreach ( entity otherGuy in otherGuys )
		{
			// skip dead people
			if ( !IsAlive( otherGuy ) )
				continue

			failedChecks = false

			// don't kill if too close to anything
			if ( Distance( otherGuy.GetOrigin(), guy.GetOrigin() ) < 2000.0 )
				break

			// don't kill if ai or players can see them
			if ( otherGuy.IsPlayer() )
			{
				if ( PlayerCanSee( otherGuy, guy, true, 135 ) )
					break
			}
			else
			{
				if ( otherGuy.CanSee( guy ) )
					break
			}

			// don't kill if they can see any ai
			if ( guy.CanSee( otherGuy ) )
				break

			failedChecks = true
		}

		if ( !IsAlive( guy.GetEnemy() ) 
			 && Distance( guy.GetOrigin(), lastCheckOrigin ) <= 64 
			 ) // assume they're not moving nor combating
			failedChecks = true // mark as checks failed

		if ( failedChecks )
			idleDuration += 0.1
		else
			idleDuration = 0.0

		lastCheckOrigin = guy.GetOrigin()
	}

	print( "cleaning up bored npc: " + guy + " from team " + guy.GetTeam() )
	HideName( guy ) // prevent their title or health bar from showing
	TakeAllWeapons( guy ) // so they won't have a weapon floating
	guy.SetNoTarget( true ) // disable npc targeting
	guy.SetNoTargetSmartAmmo( true ) // disable smart ammo targeting
	guy.EnableNPCFlag( NPC_IGNORE_ALL ) // disable any sensing
	guy.NotSolid() // disable collision
	// titan being dissolved
	if ( guy.IsTitan() )
	{
		entity soul = guy.GetTitanSoul()
		if( IsValid( soul ) )
		{
			// end any rodeo on it
			ForceTitanRodeoToEnd( guy )
			DisableTitanRodeo( guy )
			// try to hide a cleaning up titan's batteryContainer
			entity batteryContainer = soul.soul.batteryContainer
			if ( IsValid( batteryContainer ) )
				batteryContainer.Hide()
		}
	}
	// reaper being dissolved
	if ( guy.GetClassName() == "npc_super_spectre" )
	{
		if ( guy.ai.activeMinionEntArrayID > 0 )
		{
			// detonate all frag drones they owned
			foreach ( entity ent in GetScriptManagedEntArray( guy.ai.activeMinionEntArrayID ) )
			{
				if ( IsValid( ent ) ) 
				{
					if ( ent.IsNPC() && ent.ai.fragDroneArmed ) // minion may doing a deploy animation, which handled by WaitForFragDroneDeployThenDetonate()
						ent.Signal( "SuicideSpectreExploding" )
					else if ( ent.GetClassName() == "grenade" ) // minion still a grenade
						ent.Destroy()
				}
			}
		}
	}
	guy.Dissolve( ENTITY_DISSOLVE_CORE, Vector( 0, 0, 0 ), 500 ) // dissolve them to have better visual
}