untyped

global function BurnMeter_Init
global function BurnMeter_SetBoostLimit
global function BurnMeter_SetBoostRewardCount
global function BurnMeter_GetLimitedRewardCount
global function ForceSetGlobalBurncardOverride
global function GetSelectedBurncardRefFromWeaponOrPlayer
global function RunBurnCardUseFunc
global function UseBurnCardWeapon
global function UseBurnCardWeaponInCriticalSection
global function BurnMeter_GiveRewardDirect
global function GetBurnCardWeaponSkin
global function InitBurnMeterPersistentData

// shared with sv_item_inventory
global function BurnMeter_TryRewardReadyMessage

// new utility
global function BurnMeter_ApplyWeaponAmpForDuration
global function BurnMeter_PhaseRewind

// nessie modify
global function Burnmeter_SetRewardsDisabled
global function Burnmeter_GetDisabledRewards // shared with sh_burnmeter.gnut
global function Burnmeter_IsRewardDisabled // shared with sh_burnmeter.gnut
global function Burnmeter_SetForcedReward // make all players use forced reward
global function Burnmeter_GetForcedReward // shared with sh_burnmeter.gnut
global function Burnmeter_SetDefaultReplaceReward // if player is using a reward disabled by Burnmeter_SetRewardsDisabled(), we replace it with this
global function Burnmeter_GetDefaultReplaceReward // shared with sh_burnmeter.gnut

global function Burnmeter_SetRewardDisableNotification // for modded_burnmeter_items.gnut

// phase rewind
// taken from r5-s3 sh_phase_shift.gnut
const float RECONSTRUCT_REWIND_TICK = 0.1
const int RECONSTRUCT_REWIND_COUNT = 100
const float RECONSTRUCT_END_HOLD_TIME = 0.1
// burnmeter rewind effect
const float PHASE_REWIND_DURATION = 2.0

// amped weapons
const float AMPED_WEAPONS_LENGTH = 30.0

// radar jammer
const int RADAR_JAMMER_PULSE_COUNT = 3
const float RADAR_JAMMER_PULSE_DELAY = 0.0 // no pulse delay, we added 1.0s ease-off time

// map hack
const int MAPHACK_PULSE_COUNT = 4
const float MAPHACK_PULSE_DELAY = 2.0
const float MAPHACK_PULSE_LENGTH = 0.5

struct
{
	string forcedGlobalBurncardOverride = ""
	table<string, int> boostRewardCount
	table<string, int> boostLimits
	table<entity, float> playerRewardReadyMessageTime

	// nessie modify
	array<string> disabledRewards
	string forcedReward = ""
	string defaultReplaceReward = ""

	array<string> skipNotificationRewards
} file

void function BurnMeter_Init()
{
	// turret precaches
	// do we have to cache these on client? release builds sure don't
	PrecacheModel( Dev_GetAISettingAssetByKeyField_Global( "npc_turret_sentry_burn_card_ap", "DefaultModelName" ) )
    PrecacheModel( Dev_GetAISettingAssetByKeyField_Global( "npc_turret_sentry_burn_card_at", "DefaultModelName" ) )

	// setup burncard use funcs
	BurnReward_GetByRef( "burnmeter_amped_weapons" ).rewardAvailableCallback = PlayerUsesAmpedWeaponsBurncard
	BurnReward_GetByRef( "burnmeter_smart_pistol" ).rewardAvailableCallback = PlayerUsesSmartPistolBurncard
	BurnReward_GetByRef( "burnmeter_emergency_battery" ).rewardAvailableCallback = Burnmeter_EmergencyBattery
	BurnReward_GetByRef( "burnmeter_radar_jammer" ).rewardAvailableCallback = PlayerUsesRadarJammerBurncard
	BurnReward_GetByRef( "burnmeter_maphack" ).rewardAvailableCallback = PlayerUsesMaphackBurncard
	BurnReward_GetByRef( "burnmeter_phase_rewind" ).rewardAvailableCallback = PlayerUsesPhaseRewindBurncard

	// these ones aren't so important, they're either for fd ( unsupported rn ) or unused
	BurnReward_GetByRef( "burnmeter_harvester_shield" ).rewardAvailableCallback = PlayerUsesHarvesterShieldBurncard
	BurnReward_GetByRef( "burnmeter_amped_weapons_permanent" ).rewardAvailableCallback = PlayerUsesPermanentAmpedWeaponsBurncard
	BurnReward_GetByRef( "burnmeter_instant_battery" ).rewardAvailableCallback = Burnmeter_AmpedBattery
	BurnReward_GetByRef( "burnmeter_rodeo_grenade" ).rewardAvailableCallback = PlayerUsesRodeoGrenadeBurncard
	BurnReward_GetByRef( "burnmeter_nuke_titan" ).rewardAvailableCallback = PlayerUsesNukeTitanBurncard // unused in vanilla, fun though

	BurnMeter_SetBoostRewardCount( "burnmeter_ticks", 2 )

	BurnMeter_SetBoostLimit( "burnmeter_ticks", 6 )
	BurnMeter_SetBoostLimit( "burnmeter_ap_turret_weapon", 3 )
	BurnMeter_SetBoostLimit( "burnmeter_at_turret_weapon", 3 )
	BurnMeter_SetBoostLimit( "burnmeter_holopilot_nova", 3 )

	// setup player callbacks
	AddCallback_GameStateEnter( eGameState.Playing, InitBurncardsForIntroPlayers )
	AddCallback_OnClientConnected( OnClientConnected )

	AddCallback_OnPlayerRespawned( OnPlayerRespawned )

	// necessary signals
	RegisterSignal( "StopAmpedWeapons" )

	// modified
	RegisterSignal( "PlayerAmpedWeaponsThink" )

	// phase rewind
	// taken from r5-s3 sh_phase_shift.gnut
	RegisterSignal( "StartTrackingPositions" )
	RegisterSignal( "EndTrackingPositions" )
	RegisterSignal( "PhaseRewindCrouchPlayer" )
	RegisterSignal( "PhaseRewindStop" )

	AddCallback_OnTitanBecomesPilot( TitanBecomesPilot_TryStartTrackingPositions )
	AddCallback_OnPilotBecomesTitan( PilotBecomesTitan_EndTrackingPositions )
	AddCallback_OnPlayerRespawned( OnPlayerRespawn_TryStartTrackingPositions )
}

void function BurnMeter_SetBoostLimit( string burnRef, int limit )
{
	file.boostLimits[burnRef] <- limit
}

void function BurnMeter_SetBoostRewardCount( string burnRef, int rewardCount )
{
	file.boostRewardCount[burnRef] <- rewardCount
}

// reworked northstar complicated checks in sv_earn_meter_mp.gnut, tick reward count should be fixed
int function BurnMeter_GetLimitedRewardCount( entity player, string burnRef = "" )
{
	// added burnRef as a parameter, used for dice roll
	// means we dont call two lots of BurnReward_GetRandom() whilst also being able to give multiple items per dice roll (ticks)
	if (burnRef == "")
	{
		EarnObject earnObject = PlayerEarnMeter_GetReward( player )
		burnRef = earnObject.ref
	}

	int limit = -1
	int rewardCount = 1

	if ( burnRef in file.boostLimits )
		limit = file.boostLimits[burnRef]

	if ( burnRef in file.boostRewardCount )
		rewardCount = file.boostRewardCount[burnRef]

	if ( limit < 0 )
		return rewardCount

	int current = PlayerInventory_CountBurnRef( player, burnRef )
	int delta = limit - current

	if ( delta <= 0 )
		return 0

	return minint( delta, rewardCount )
}

void function ForceSetGlobalBurncardOverride( string ref )
{
	file.forcedGlobalBurncardOverride = ref
}

string function GetSelectedBurncardRefFromWeaponOrPlayer( entity weapon, entity player )
{
	// determine the burncard we're using
	// in actual gameplay, this will always be the player's selected burncard
	// however, if we want to manually give burncards and such, we want to make sure they'll still work
	// so some extra work goes into this

	string ref = GetSelectedBurnCardRef( player )

	if ( file.forcedGlobalBurncardOverride.len() > 0 )
		ref = file.forcedGlobalBurncardOverride

	if ( IsValid( weapon ) )
	{
		// determine via weapon mods, this assumes weapon mod names are the same as burn refs, which works in practice but is a bit weird
		// this does crash with the burnmeter_doublexp mod, but who cares, it doesn't get hit normally
		if ( weapon.GetWeaponClassName() == "mp_ability_burncardweapon" )
		{
			foreach ( string mod in weapon.GetMods() )
				if ( mod.find( "burnmeter_" ) == 0 )
					return mod
		}
		// determine via weapon name in the case of stuff like holopilot etc
		else
		{
			// unfortunately, we have to hardcode this, we don't have a way of getting refs directly from weapons other than the burncard weapon
			// this should be modular at some point, wish we could just iterate over burncards and find ones with the current weapon, but this isn't possible
			switch ( weapon.GetWeaponClassName() )
			{
				case "mp_ability_holopilot_nova":
					return "burnmeter_holopilot_nova"

				case "mp_weapon_arc_trap":
					return "burnmeter_arc_trap"

				case "mp_weapon_frag_drone":
					return "burnmeter_ticks"

				case "mp_weapon_hard_cover":
					return "burnmeter_hard_cover"

				case "mp_ability_turretweapon":
					// turret has 2 burncards, antititan and antipilot
					if( weapon.HasMod( "burnmeter_at_turret_weapon" ) || weapon.HasMod( "burnmeter_at_turret_weapon_inf" ) )
						return "burnmeter_at_turret_weapon"
					else
						return "burnmeter_ap_turret_weapon"

				// note: cloak and stim both have burn_card_weapon_mod mods, but they aren't used and don't call burncard code at all, likely for tf1 infinite stim/cloak burncards?

				default:
					//print( "tried to use unknown burncard weapon " + weapon.GetWeaponClassName() )
					return "burnmeter_amped_weapons"
			}
		}
	}

	return ref
}

void function InitPlayerBurncards( entity player )
{
	string ref = GetSelectedBurncardRefFromWeaponOrPlayer( null, player )
	BurnReward reward = BurnReward_GetByRef( ref )
	player.SetPlayerNetInt( TOP_INVENTORY_ITEM_BURN_CARD_ID, reward.id )
}

void function InitBurncardsForIntroPlayers()
{
	// gotta do this, since sh_burnmeter uses this netint
	foreach ( entity player in GetPlayerArray() )
		InitPlayerBurncards( player )
}

void function OnClientConnected( entity player )
{
	InitBurncardsForLateJoiner( player )
	file.playerRewardReadyMessageTime[ player ] <- 0.0
}

void function InitBurncardsForLateJoiner( entity player )
{
	// gotta do this, since sh_burnmeter uses this netint
	if ( GetGameState() > eGameState.Prematch )
		InitPlayerBurncards( player )
}

void function OnPlayerRespawned( entity player )
{
	BurnMeter_TryRewardReadyMessage( player )
	OnPlayerRespawn_TryStartTrackingPositions( player )
}

bool function BurnMeter_TryRewardReadyMessage( entity player )
{
	if ( player.IsTitan() ) // titan player only have smoke, should be handled by JFS_PlayerEarnMeter_CoreRewardUpdate()
		return false
	if ( Time() >= file.playerRewardReadyMessageTime[ player ] )
	{
		Remote_CallFunction_Replay( player, "ServerCallback_RewardReadyMessage", Time() - GetPlayerLastRespawnTime( player ) )
		file.playerRewardReadyMessageTime[ player ] = Time() + 8.0 // shortest wait time in ServerCallback_RewardReadyMessage()
		return true
	}
	return false
}

void function RunBurnCardUseFunc( entity player, string itemRef )
{
	//print( itemRef )

	void functionref( entity ) ornull func = BurnReward_GetByRef( itemRef ).rewardAvailableCallback
	if ( func != null )
		( expect void functionref( entity ) ( func ) )( player )
	//else
	//	print( "tried to call usefunc for burncard " + itemRef + ", but func did not exist!" )
}

void function UseBurnCardWeapon( entity weapon, entity player )
{
	string ref = GetSelectedBurncardRefFromWeaponOrPlayer( weapon, player )

	//Remote_CallFunction_Replay( player, "ServerCallback_RewardUsed", BurnReward_GetByRef( ref ).id )
	// modified: if the reward is mark as "skip notification", we don't do it
	if ( !file.skipNotificationRewards.contains( ref ) )
		Remote_CallFunction_Replay( player, "ServerCallback_RewardUsed", BurnReward_GetByRef( ref ).id )
	RunBurnCardUseFunc( player, ref )

	// no need to do reward used state for pilots, vanilla doesn't seem to have this feature
	//if ( PlayerEarnMeter_IsRewardAvailable( player ) )
	//	PlayerEarnMeter_SetRewardUsed( player )

	PlayerInventory_PopInventoryItem( player )

	// add progression
	UpdatePlayerStat( player, "misc_stats", "boostsActivated" )
}

void function UseBurnCardWeaponInCriticalSection( entity weapon, entity ownerPlayer )
{
	// ignoring critical section stuff, assuming it was necessary in tf1 where burncards were part of inventory, but not here
	UseBurnCardWeapon( weapon, ownerPlayer )
}

void function BurnMeter_GiveRewardDirect( entity player, string itemRef )
{
	// modified
	// using checks in sh_burnmeter now, left this for random_foil
	if ( Burnmeter_IsRewardDisabled( itemRef ) )
	{
		// try to use defaultReplaceReward
		itemRef = Burnmeter_GetDefaultReplaceReward()
	}

	// forced reward
	if ( file.forcedReward != "" )
		itemRef = file.forcedReward
	//

	PlayerInventory_PushInventoryItemByBurnRef( player, itemRef )
	// this uses "timeSinceLastRespawn" as param!!!
	//Remote_CallFunction_Replay( player, "ServerCallback_RewardReadyMessage", player.s.respawnTime )
	BurnMeter_TryRewardReadyMessage( player )
}

int function GetBurnCardWeaponSkin( entity weapon )
{
	return GetBoostSkin( GetSelectedBurncardRefFromWeaponOrPlayer( weapon, weapon.GetOwner() ) )
}

// stub
void function InitBurnMeterPersistentData( entity player )
{}


// burncard use funcs

void function PlayerUsesAmpedWeaponsBurncard( entity player )
{
	thread PlayerUsesAmpedWeaponsBurncardThreaded( player )
}

void function PlayerUsesAmpedWeaponsBurncardThreaded( entity player )
{
	PlayBattleChatterLine( player, "bc_pAmp" ) // special battle chatter

	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.Signal( "PlayerAmpedWeaponsThink" )
	player.EndSignal( "PlayerAmpedWeaponsThink" )

	// temporarily no sense
	OnThreadEnd(
		function(): ( player )
		{

		}
	)

	//weapons.extend( player.GetOffhandWeapons() ) // idk? unsure of vanilla behaviour here
	foreach ( entity weapon in player.GetMainWeapons() )
		BurnMeter_ApplyWeaponAmpForDuration( weapon, AMPED_WEAPONS_LENGTH )

	wait AMPED_WEAPONS_LENGTH // temporarily no sense
}

void function BurnMeter_ApplyWeaponAmpForDuration( entity weapon, float duration )
{
	thread ApplyWeaponAmpForDuration_Threaded( weapon, duration )
}

void function ApplyWeaponAmpForDuration_Threaded( entity weapon, float duration )
{
	weapon.EndSignal( "OnDestroy" )
	// signal to stop previous amped weapon thread
	weapon.Signal( "StopAmpedWeapons" )
	// this signal also sent by StoreWeapons() in titan_transfer.nut
	// we want to add premanent amped weapon, if duration hits < 0 we never let the amped weapon stop on titan transfer
	if ( duration >= 0 ) // duration < 0 means permanent amp, no ever need to stop!
		weapon.EndSignal( "StopAmpedWeapons" )

	array<string> emptyStringArray
	table< string, array<string> > weaponMod =
	{
		[ "modsToRemove" ] = clone emptyStringArray, // mods that should be removed after amping ends
		[ "modsToRestore" ] = clone emptyStringArray, // mods that should be restored after amping ends
	}

	OnThreadEnd
	(
		function(): ( weapon, weaponMod )
		{
			if ( IsValid( weapon ) )
			{
				// remove burnmod for weapon
				foreach ( string mod in weaponMod[ "modsToRemove" ] )
					weapon.RemoveMod( mod )

				// restore mods for weapon
				foreach ( string mod in weaponMod[ "modsToRestore" ] )
					weapon.AddMod( mod )

				// remove "WEAPON AMPED" RUI
				weapon.SetScriptFlags0( weapon.GetScriptFlags0() & ~WEAPONFLAG_AMPED )
				weapon.SetScriptTime0( 0.0 )
			}
		}
	)

	// modified: always append the first burnmod for weapon by default, in case we add modded burnmods
	array<string> burnMods = GetWeaponBurnMods( weapon.GetWeaponClassName() )
	string mainBurnMod = "" 
	if ( burnMods.len() > 0 )
		mainBurnMod = burnMods[0]
	//print( "mainBurnMod: " + mainBurnMod )

	// defensive fix for weapons that already have a burnmod, or already having a amping RUI
	if ( weapon.HasMod( mainBurnMod ) )
		return // don't apply amped weapons
	if ( weapon.GetScriptFlags0() & WEAPONFLAG_AMPED )
	{
		weapon.SetScriptFlags0( weapon.GetScriptFlags0() & ~WEAPONFLAG_AMPED )
		weapon.SetScriptTime0( 0.0 )
	}

	// applying weapon mods
	// HACK for silencer
	if ( weapon.HasMod( "silencer" ) )
	{
		weapon.RemoveMod( "silencer" ) // both this and the burnmod will override firing fx, if a second one overrides this we crash
		weaponMod[ "modsToRestore" ].append( "silencer" ) // we should restore silencer for this weapon after thread
	}
	// catch incompatibilities just in case
	try
	{
		weapon.AddMod( mainBurnMod )
		weaponMod[ "modsToRemove" ].append( mainBurnMod ) // we remove the mod after thread
	}
	catch( ex ) // ran into error, remove burnmod on this weapon
	{
		weapon.RemoveMod( mainBurnMod )
		return
	}

	// needed to display amped weapon time left
	weapon.SetScriptFlags0( weapon.GetScriptFlags0() | WEAPONFLAG_AMPED )
	if ( duration >= 0 ) // apply timer if duration >= 0
	{
		weapon.SetScriptTime0( Time() + duration )
		wait duration
	}
	else // duration < 0, it means permanent amp
		WaitForever()
}

void function PlayerUsesSmartPistolBurncard( entity player )
{
	// take secondary weapon
	array<entity> sidearms = player.GetMainWeapons()
	if ( sidearms.len() > 1 )
		player.TakeWeaponNow( sidearms[ 1 ].GetWeaponClassName() ) // take secondary weapon

	player.GiveWeapon( "mp_weapon_smart_pistol" )
	player.SetActiveWeaponByName( "mp_weapon_smart_pistol" )

	// do we need to track the player losing smart pistol, then give their old weapon back? idk not implementing for now, check later
}

void function PlayerUsesRadarJammerBurncard( entity player )
{
	thread PlayerUsesRadarJammerBurncardThreaded( player )
}

// nothstar missing
void function PlayerUsesRadarJammerBurncardThreaded( entity player )
{
	player.EndSignal( "OnDestroy" )

	// notification
	foreach ( entity otherPlayer in GetPlayerArray() )
	{
		MessageToPlayer( otherPlayer, eEventNotifications.Clear, player )
		MessageToPlayer( otherPlayer, eEventNotifications.BurnMeter_RadarJammerUsed, player )
	}

	for ( int i = 0; i < RADAR_JAMMER_PULSE_COUNT; i++ )
	{
		foreach ( entity otherPlayer in GetPlayerArray() )
		{
			if ( otherPlayer.GetTeam() != player.GetTeam() )
				StatusEffect_AddTimed( otherPlayer, eStatusEffect.minimap_jammed, 1.0, BURN_METER_RADAR_JAMMER_PULSE_DURATION, BURN_METER_RADAR_JAMMER_EASE_OFF_TIME )
		}

		wait BURN_METER_RADAR_JAMMER_PULSE_DURATION + BURN_METER_RADAR_JAMMER_EASE_OFF_TIME + RADAR_JAMMER_PULSE_DELAY
	}
}

void function PlayerUsesMaphackBurncard( entity player )
{
	thread PlayerUsesMaphackBurncardThreaded( player )
}

void function PlayerUsesMaphackBurncardThreaded( entity player )
{
	player.EndSignal( "OnDestroy" )

	// If the user disconnects, we need to clean up hanging sonar effects, so hold relevant data here.
	int playerTeam = player.GetTeam()
	//bool cleanup = false // can't just pass a free non-entity var into OnThreadEnd()
	table results = {
		shouldCleanup = false
	}
	array<entity> entities, affectedEntities

	OnThreadEnd(
		function() : ( results, playerTeam, affectedEntities )
		{
			if ( !results.shouldCleanup ) // Map hack ended when sonar wasn't active, no cleanup needed
				return
			
			foreach ( entity ent in affectedEntities )
			{
				if ( IsValid( ent ) )
					SonarEnd( ent, playerTeam )
			}
			DecrementSonarPerTeam( playerTeam )
		}
	)

	// todo: potentially look into ScanMinimap in _passives for doing this better? boost is pretty likely based off it pretty heavily
	for ( int i = 0; i < MAPHACK_PULSE_COUNT; i++ )
	{
		EmitSoundOnEntityOnlyToPlayer( player, player, "Burn_Card_Map_Hack_Radar_Pulse_V1_1P" )

		entities = GetPlayerArray()
		entities.extend( GetNPCArray() )
		entities.extend( GetPlayerDecoyArray() )

		IncrementSonarPerTeam( playerTeam )

		if ( IsAlive( player ) )
			Remote_CallFunction_Replay( player, "ServerCallback_SonarPulseFromPosition", player.GetOrigin().x, player.GetOrigin().y, player.GetOrigin().z, SONAR_GRENADE_RADIUS )
		
		foreach ( entity ent in entities )
		{
			if ( !IsValid( ent ) ) // Not sure why we can get invalid entities at this point
				continue

			if ( ent.IsPlayer() )
			{
				// Map Hack also gives radar on enemies for longer than the sonar duration.
				if ( ent.GetTeam() == playerTeam )
					thread ScanMinimap( ent, false, MAPHACK_PULSE_DELAY - 0.2 )
			}

			if ( ent.GetTeam() != playerTeam )
			{
				StatusEffect_AddTimed( ent, eStatusEffect.maphack_detected, 1.0, MAPHACK_PULSE_DELAY, 0.0 )
				affectedEntities.append( ent )
				SonarStart( ent, player.GetOrigin(), playerTeam, player )
			}
		}
		//cleanup = true // can't just pass a free non-entity var into OnThreadEnd()
		results.shouldCleanup = true
		wait MAPHACK_PULSE_LENGTH

		DecrementSonarPerTeam( playerTeam )
		// JFS - loop through entities that were explicitly given sonar in case they switched teams during the wait
		foreach ( entity ent in affectedEntities )
		{
			if ( IsValid( ent ) )
				SonarEnd( ent, playerTeam )
		}
		//cleanup = false // can't just pass a free non-entity var into OnThreadEnd()
		results.shouldCleanup = false
		affectedEntities.clear()
		wait MAPHACK_PULSE_DELAY - MAPHACK_PULSE_LENGTH
	}
}

void function PlayerUsesPhaseRewindBurncard( entity player )
{
	BurnMeter_PhaseRewind( player, PHASE_REWIND_DURATION )
}

// taken from r5-s3
// this can handle rodeo and evac ship parent:
// PhaseShift() will cause player to end rodeo, and it won't take any effect when inside a evac ship
void function BurnMeter_PhaseRewind( entity player, float rewindDuration = -1 ) // -1 means shift all nodes
{
	if ( PhaseShift( player, 0.0, 999 ) )
		thread BurnMeter_PhaseRewind_threaded( player, rewindDuration )
}

void function BurnMeter_PhaseRewind_threaded( entity player, float rewindDuration )
{
	player.EndSignal( "OnDeath" )

	player.SetPredictionEnabled( false )
	HolsterAndDisableWeapons( player )

	entity mover = CreateScriptMover( player.GetOrigin(), player.GetAngles() )

	PhaseRewindData rewindData
	rewindData.origin = player.GetOrigin()
	rewindData.angles = player.GetAngles()
	rewindData.wasInContextAction = player.ContextAction_IsActive()
	rewindData.wasCrouched = player.IsCrouched()

	vector originAtStart = player.GetOrigin()

	OnThreadEnd(
		function() : ( player, mover, rewindData, originAtStart )
		{
			if ( IsValid( player ) )
			{
				player.SetPredictionEnabled( true )
				CancelPhaseShift( player )
				DeployAndEnableWeapons( player )
				player.ClearParent()
				player.SetVelocity( <0, 0, 10> )
				player.SetOrigin( rewindData.origin )
				player.SetAngles( rewindData.angles )
				// if ( rewindData.wasCrouched )
				// {
				// 	thread PhaseRewindCrouchPlayer( player )
				// }

				player.p.burnCardPhaseRewindStruct.phaseRetreatSavedPositions.clear()
				player.p.burnCardPhaseRewindStruct.phaseRetreatShouldSave = true

				/* // removed
				if ( rewindData.wasInContextAction && !PutEntityInSafeSpot( player, null, null, originAtStart, player.GetOrigin() ) )
					//Only do PutEntityInSafeSpot check() if the last saved position they were in a context action, since context actions can put you in normally illegal spots, e.g. behind geo. If you do the PutEntityInSafeSpot() check all the time you get false positives if you always use start position as safe starting spot
				{
					player.TakeDamage( player.GetHealth() + 1, player, player, { damageSourceId = eDamageSourceId.phase_shift, scriptType = DF_GIB | DF_BYPASS_SHIELD | DF_SKIPS_DOOMED_STATE } )
				}
				*/

				// always fix position after rewind
				PutPhaseRewindedPlayerInSafeSpot( player, 1 )
			}

			// destroy mover after player being clear parented
			if ( IsValid( mover ) )
				mover.Destroy()
		}
	)

	player.p.burnCardPhaseRewindStruct.phaseRetreatShouldSave = false

	WaitFrame() // wait for the last save( better not use "WaitEndFrame" in this section )

	EmitSoundOnEntityOnlyToPlayer( player, player, "pilot_phaserewind_1p" )
	EmitSoundOnEntityExceptToPlayer( player, player, "pilot_phaserewind_3p" )

	player.SetParent( mover, "REF", false )
	ViewConeZeroInstant( player )
	array<PhaseRewindData> savedPositions = player.p.burnCardPhaseRewindStruct.phaseRetreatSavedPositions

	bool rewindEndAfterTime = rewindDuration >= 0 // duration < 0 meaning phase all ticks( 60ticks, 6s )
	float rewindEndTime = Time() + rewindDuration
	for ( int i = savedPositions.len() - 1; i >= 0; i-- )
	{
		mover.NonPhysicsMoveTo( savedPositions[i].origin, RECONSTRUCT_REWIND_TICK, 0, 0 )
		mover.NonPhysicsRotateTo( savedPositions[i].angles, RECONSTRUCT_REWIND_TICK, 0, 0 )
		rewindData.origin = savedPositions[i].origin
		rewindData.angles = savedPositions[i].angles
		player.SetVelocity( savedPositions[i].velocity )
		rewindData.velocity = savedPositions[i].velocity
		rewindData.wasInContextAction = savedPositions[i].wasInContextAction
		rewindData.wasCrouched = savedPositions[i].wasCrouched
		//printt( "wasCrouched?" + rewindData.wasCrouched )
		if ( rewindData.wasCrouched )
		{
			//printt( "PhaseRewindCrouchPlayer" )
			thread PhaseRewindCrouchPlayer( player )
		}

		WaitFrame()

		// modified rewind endTime
		if ( rewindEndAfterTime && Time() > rewindEndTime )
			return
	}
}

void function PhaseRewindCrouchPlayer( entity player )
{
	Signal( player, "PhaseRewindCrouchPlayer" )
	EndSignal( player, "OnDeath" )
	EndSignal( player, "PhaseRewindCrouchPlayer" )
	player.ForceCrouch()
	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				player.UnforceCrouch()
			}
		}
	)
	wait 0.2
}

void function PutPhaseRewindedPlayerInSafeSpot( entity player, int severity )
{
	vector baseOrigin = player.GetOrigin()

    if( PutEntityInSafeSpot( player, player, null, < baseOrigin.x, baseOrigin.y + severity, baseOrigin.z >, baseOrigin ) )
        return

    if( PutEntityInSafeSpot( player, player, null, < baseOrigin.x, baseOrigin.y - severity, baseOrigin.z >, baseOrigin ) )
        return
 
    if( PutEntityInSafeSpot( player, player, null, < baseOrigin.x + severity, baseOrigin.y, baseOrigin.z >, baseOrigin ) )
        return

	if( PutEntityInSafeSpot( player, player, null, < baseOrigin.x - severity, baseOrigin.y, baseOrigin.z >, baseOrigin ) )
        return

	if( PutEntityInSafeSpot( player, player, null, < baseOrigin.x, baseOrigin.y, baseOrigin.z + severity >, baseOrigin ) )
        return

	if( PutEntityInSafeSpot( player, player, null, < baseOrigin.x, baseOrigin.y, baseOrigin.z - severity >, baseOrigin ) )
        return

    return PutPhaseRewindedPlayerInSafeSpot( player, severity + severity )
}

void function TitanBecomesPilot_TryStartTrackingPositions( entity playerPilot, entity npcTitan )
{
	TryStartTrackingPositions( playerPilot )
}

void function PilotBecomesTitan_EndTrackingPositions( entity playerTitan, entity npcTitan )
{
	EndTrackingPositions( playerTitan )
}

void function OnPlayerRespawn_TryStartTrackingPositions( entity player )
{
	TryStartTrackingPositions( player )
}

void function TryStartTrackingPositions( entity player )
{
	if ( player.IsTitan() )
		return

	if ( !IsAlive( player ) )
		return

	if ( player.IsPhaseShifted() )
		//Might already be phase rewinded, don't clear out phaseRetreatSavedPositions array
		return

	thread StartTrackingPositions( player )
}

void function EndTrackingPositions( entity player )
{
	player.Signal( "EndTrackingPositions" )
}

void function StartTrackingPositions( entity player )
{
	player.EndSignal( "EndTrackingPositions" )
	player.Signal( "StartTrackingPositions" )
	player.EndSignal( "StartTrackingPositions" )
	player.EndSignal( "OnDeath" )

	OnThreadEnd(
		function() : ( player )
		{
			if ( IsValid( player ) )
			{
				player.p.burnCardPhaseRewindStruct.phaseRetreatSavedPositions.clear()
			}
		}
	)

	int maxSaves = 60

	while ( 1 )
	{
		if ( player.p.burnCardPhaseRewindStruct.phaseRetreatShouldSave && !player.IsTitan() )
		{
			vector origin = player.GetOriginOutOfTraversal()
			vector angles = player.GetAngles()
			angles = <0, player.CameraAngles().y, 0>

			PhaseRewindData data
			data.origin = origin
			data.angles = angles
			data.velocity = player.GetVelocity()
			data.wasInContextAction = player.ContextAction_IsActive()
			data.wasCrouched = player.IsCrouched()

			// printt( "----------" + data.wasCrouched + "----------" )

			player.p.burnCardPhaseRewindStruct.phaseRetreatSavedPositions.append( data )
			if ( player.p.burnCardPhaseRewindStruct.phaseRetreatSavedPositions.len() > maxSaves )
				player.p.burnCardPhaseRewindStruct.phaseRetreatSavedPositions.remove( 0 )
		}
		// wait RECONSTRUCT_REWIND_SAVE_TICK
		WaitFrame()
	}
}

void function PlayerUsesNukeTitanBurncard( entity player )
{
	thread PlayerUsesNukeBurncardThreaded( player )
}

void function PlayerUsesNukeBurncardThreaded( entity player )
{
	Point spawnpoint = GetTitanReplacementPoint( player, false )
	entity titan = CreateOgre( TEAM_UNASSIGNED, spawnpoint.origin, spawnpoint.angles )
	DispatchSpawn( titan )

	titan.kv.script_hotdrop = "4"
	thread NPCTitanHotdrops( titan, false, "at_hotdrop_drop_2knee_turbo" )

	Remote_CallFunction_Replay( player, "ServerCallback_ReplacementTitanSpawnpoint", spawnpoint.origin.x, spawnpoint.origin.y, spawnpoint.origin.z, Time() + GetHotDropImpactTime( titan, "at_hotdrop_drop_2knee_turbo" ) + 1.6 )

	DoomTitan( titan )
	titan.SetBossPlayer(player) // Do this so that if we crush something we get awarded the kill.

	entity soul = titan.GetTitanSoul()
	soul.soul.nukeAttacker = player // Use this to get credit for the explosion kills.

	NPC_SetNuclearPayload( titan )

	titan.WaitSignal( "ClearDisableTitanfall" )
	titan.ClearBossPlayer() // Stop being the boss so we don't get an award for this titan blowing up.

	thread TitanEjectPlayer( titan, true )
}

// WIP: add support for modded burnmods
void function PlayerUsesPermanentAmpedWeaponsBurncard( entity player )
{
	array<entity> weapons = player.GetMainWeapons()
	//weapons.extend( player.GetOffhandWeapons() ) // idk? unsure of vanilla behaviour here
	foreach ( entity weapon in weapons )
		BurnMeter_ApplyWeaponAmpForDuration( weapon, -1 ) // -1 means infinite duration
}

void function PlayerUsesHarvesterShieldBurncard( entity player )
{
	player.SetPlayerNetInt( "numHarvesterShieldBoost", player.GetPlayerNetInt( "numHarvesterShieldBoost" ) + 1 )
}

void function PlayerUsesRodeoGrenadeBurncard( entity player )
{
	player.SetPlayerNetInt( "numSuperRodeoGrenades", player.GetPlayerNetInt( "numSuperRodeoGrenades" ) + 1 )
}

// nessie modify
void function Burnmeter_SetRewardsDisabled( array<string> rewards )
{
	file.disabledRewards = rewards
}

array<string> function Burnmeter_GetDisabledRewards()
{
	return file.disabledRewards
}

bool function Burnmeter_IsRewardDisabled( string reward )
{
	return file.disabledRewards.contains( reward )
}

void function Burnmeter_SetForcedReward( string reward )
{
	file.forcedReward = reward
}

string function Burnmeter_GetForcedReward()
{
	return file.forcedReward
}

void function Burnmeter_SetDefaultReplaceReward( string reward )
{
	file.defaultReplaceReward = reward
}

string function Burnmeter_GetDefaultReplaceReward()
{
	if ( file.defaultReplaceReward == "" ) // no replacement reward given!
		return "burnmeter_amped_weapons" // replace with amped weapons by default
	return file.defaultReplaceReward
}

void function Burnmeter_SetRewardDisableNotification( string ref )
{
	if ( !file.skipNotificationRewards.contains( ref ) )
		file.skipNotificationRewards.append( ref )
}