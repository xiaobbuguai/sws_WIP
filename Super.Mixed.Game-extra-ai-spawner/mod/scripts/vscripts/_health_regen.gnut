
global function HealthRegen_Init

global function PilotHealthRegenThinkSP
global function PilotShieldHealthUpdate

// modified
global function HealthRegen_SetCustomRegenDelay
global function HealthRegen_SetCustomRegenRate
global function HealthRegen_SetAlwaysFastRegen
global function HealthRegen_Disabled

struct
{
	float healthRegenRate

	//modified
	float customHealthRegenDelayNormal = -1.0
	float customHealthRegenDelayFast = -1.0
	float customHealthRegenDelayStim = -1.0
	float customHealthRegenRateNormal = -1.0
	float customHealthRegenRateStim = -1.0
	bool alwaysFastRegen = false
	bool disableHealthRegen = false

	// damage feedback variable
	bool isShieldDamage = false
	float shieldActualDamage = 0.0
	bool isShieldBrokeDamage = false
	float shieldBrokeActualDamage = 0.0
} file

void function HealthRegen_Init()
{
	if ( IsSingleplayer() )
	{
		file.healthRegenRate = 1.0
	}
	else
	{
		file.healthRegenRate = 6.0

		AddCallback_PlayerClassChanged( HealthRegen_OnPlayerClassChangedMP )
		RegisterSignal( "PilotHealthRegenThink" )
		RegisterSignal( "StopHealthRegenThink" ) // modify for having different health regen function for each player
	
		// modified callback in _base_gametype.gnut
		AddCallback_PlayerDamageFeedback( 
			// don't know why it always cause Compile Error: found identifier "feedbackStruct"
			// we try to make a function inside
			void function( entity victim, var damageInfo, PlayerDamageFeedbackStruct feedbackStruct )
			{
				if ( file.isShieldDamage )
				{
					feedbackStruct.damageToDisplay = file.shieldActualDamage
					file.isShieldDamage = false
				}
				if ( file.isShieldBrokeDamage ) // for pilot taking a damage that will break shield, display the correct damage amount
				{
					//print( "pilot taking shield broke damage!" )
					feedbackStruct.damageToDisplay = file.shieldBrokeActualDamage
					file.isShieldBrokeDamage = false
				}
			}
		)
	}
}

void function PilotHealthRegenThinkSP( entity player )
{
	player.EndSignal( "OnDestroy" )

	while ( IsValid( player ) )
	{
		wait( HEALTH_REGEN_TICK_TIME )

		if ( !IsAlive( player ) )
			continue

		if ( !IsPilot( player ) )
			continue

		if ( shGlobal.proto_pilotHealthRegenDisabled )
			continue

		//Assert( IsTestMap() || player.GetPlayerSettings() == DEFAULT_PILOT_SETTINGS, "for now, we should all be pilot_solo at all times, or in a test map." )

		if ( player.GetHealth() == player.GetMaxHealth() )
			continue

		float healthRegenRate = 4.0
		float healthRegenStartDelay = GraphCapped( player.GetHealth(), 0, player.GetMaxHealth(), 3.0, 0.8 )

		//printt( "recentDamage " + recentDamage + " delay " + healthRegenStartDelay + " rate " + healthRegenRate )

		if ( Time() - player.p.lastDamageTime < healthRegenStartDelay )
		{
			continue
		}

		player.SetHealth( min( player.GetMaxHealth(), player.GetHealth() + healthRegenRate ) )
	}
}

bool function IsHealActive( entity player )
{
	return StatusEffect_Get( player, eStatusEffect.stim_visual_effect ) > 0.0
}

void function PilotHealthRegenThinkMP( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.Signal( "PilotHealthRegenThink" )
	player.EndSignal( "PilotHealthRegenThink" )
	player.EndSignal( "StopHealthRegenThink" ) // modify for having different health regen function for each player

	float healthRegenStartDelay = 5.0 //Needs to use GetPlayerSettingsField() instead of hard coding, waiting on Bug 129567
	//float healthRegenStartDelay = player.GetPlayerSettingsField( "powerRegenRateOp" ) // seconds after we take damager to start regen
	
	// why do we cache these things here? what if we update passives mid-way??
	//if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) )
	//	healthRegenStartDelay = 2.5

	while ( IsValid( player ) )
	{
		wait( HEALTH_REGEN_TICK_TIME )

		// modified settings!
		if( file.disableHealthRegen )
			continue

		if ( !IsAlive( player ) )
			continue

		if ( !IsPilot( player ) )
			continue

		if ( shGlobal.proto_pilotHealthRegenDisabled )
			continue

		float healthRegenRate = file.healthRegenRate 	// health regen per tick
		// modified settings!!!
		if ( file.customHealthRegenRateNormal > 0 )
			healthRegenRate = file.customHealthRegenRateNormal

		if ( player.GetHealth() == player.GetMaxHealth() )
			continue

		// No regen during phase shift
		if ( player.IsPhaseShifted() )
			continue

		// modified: update health regen delay each loop
		healthRegenStartDelay = 5.0
		if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) || file.alwaysFastRegen )
			healthRegenStartDelay = 2.5

		// modified settings!!!
		if ( file.customHealthRegenDelayNormal > 0 )
			healthRegenStartDelay = file.customHealthRegenDelayNormal
		if ( file.customHealthRegenDelayFast > 0 )
		{
			if ( PlayerHasPassive( player, ePassives.PAS_FAST_HEALTH_REGEN ) || file.alwaysFastRegen )
				healthRegenStartDelay = file.customHealthRegenDelayFast
		}

		if ( IsHealActive( player ) )
		{
			// modified settings!!!
			if( file.customHealthRegenDelayStim > 0 )
			{
				if ( Time() - player.p.lastDamageTime < min( file.customHealthRegenDelayStim, healthRegenStartDelay ) )
					continue
				else
				{
					if ( file.customHealthRegenRateStim > 0 )
						healthRegenRate = file.customHealthRegenRateStim
					else
						healthRegenRate = healthRegenRate * ABILITY_STIM_REGEN_MOD
				}
			}
			else
			{
				if ( Time() - player.p.lastDamageTime < min( ABILITY_STIM_REGEN_DELAY, healthRegenStartDelay ) )
					continue
				else
				{
					// modified settings!!!
					if ( file.customHealthRegenRateStim > 0 )
						healthRegenRate = file.customHealthRegenRateStim
					else
						healthRegenRate = healthRegenRate * ABILITY_STIM_REGEN_MOD
				}
			}
		}
		else if ( Time() - player.p.lastDamageTime < healthRegenStartDelay )
		{
			continue
		}

		player.SetHealth( min( player.GetMaxHealth(), player.GetHealth() + healthRegenRate ) )
		if ( player.GetHealth() == player.GetMaxHealth() )
		{
			ClearRecentDamageHistory( player )
			ClearLastAttacker( player )
		}
	}
}

void function HealthRegen_OnPlayerClassChangedMP( entity player )
{
	thread PilotHealthRegenThinkMP( player )
}

// APEX version
float function PilotShieldHealthUpdate( entity player, var damageInfo )
{
	//print( "Running PilotShieldHealthUpdate()" )
	if ( DamageInfo_GetForceKill( damageInfo ) )
	{
		player.SetShieldHealth( 0 )
		return 0.0
	}

	int shieldHealth = player.GetShieldHealth()

	float shieldDamage = 0

	if ( shieldHealth )
	{
		DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )

		shieldDamage = PilotShieldModifyDamage( player, damageInfo )

		//if ( shieldDamage )
		//	DamageInfo_SetDamage( damageInfo, shieldDamage )
	}

	return shieldDamage
}

float function PilotShieldModifyDamage( entity player, var damageInfo )
{
	float shieldHealth = float( player.GetShieldHealth() )
	float damage = DamageInfo_GetDamage( damageInfo )

	float newShieldHealth = shieldHealth - damage
	float permanentDamage = 0.0

	if ( newShieldHealth < 0 )
		permanentDamage = fabs( newShieldHealth )

	player.SetShieldHealth( maxint( 0, int( newShieldHealth ) ) )

	entity attacker = DamageInfo_GetAttacker( damageInfo )

	if ( shieldHealth && newShieldHealth <= 0 )
	{
		EmitSoundOnEntity( player, "titan_energyshield_down" )
	}
	if ( permanentDamage > 0 )
	{
		//print( "Shield Modified damage is: " + string( permanentDamage ) )
		file.isShieldBrokeDamage = true
		file.shieldBrokeActualDamage = damage
		DamageInfo_SetDamage( damageInfo, permanentDamage )

		//if ( permanentDamage >= player.GetHealth() ) // defensive fix, now handled in _codecallbacks.gnut
		//	player.SetShieldHealth( 0 )
	}
	else // damage is protected
	{
		//print( "Damage protected by pilot shield!" )
		file.isShieldDamage = true
		file.shieldActualDamage = damage
		DamageInfo_SetDamage( damageInfo, 0 )
	}

	return min( shieldHealth, damage )
}

/*
float function PilotShieldHealthUpdate( entity player, var damageInfo )
{
	if ( DamageInfo_GetForceKill( damageInfo ) )
	{
		player.SetShieldHealth( 0 )
		return 0.0
	}

	int shieldHealth = player.GetShieldHealth()

	//float shieldDamage = 0
	float permanentDamage = 0.0

	if ( shieldHealth )
	{
		DamageInfo_AddCustomDamageType( damageInfo, DF_SHIELD_DAMAGE )

		//shieldDamage = PilotShieldModifyDamage( player, damageInfo )
		permanentDamage = PilotShieldModifyDamage( player, damageInfo )

		//if ( shieldDamage )
		//	DamageInfo_SetDamage( damageInfo, 0 )
		if( !permanentDamage )
			DamageInfo_SetDamage( damageInfo, 0 )
	}

	//return shieldDamage
	return permanentDamage
}

float function PilotShieldModifyDamage( entity player, var damageInfo )
{
	float shieldHealth = float( player.GetShieldHealth() )
	float damage = DamageInfo_GetDamage( damageInfo )

	float newShieldHealth = shieldHealth - damage
	float permanentDamage = 0.0

	//if ( newShieldHealth < 0 )
		//permanentDamage = fabs( newShieldHealth )
	if ( newShieldHealth < 0 )
		permanentDamage = fabs( newShieldHealth ) - shieldHealth

	player.SetShieldHealth( maxint( 0, int( newShieldHealth ) ) )

	if ( shieldHealth && newShieldHealth <= 0 )
	{
		EmitSoundOnEntity( player, "titan_energyshield_down" )
	}

	DamageInfo_SetDamage( damageInfo, permanentDamage )

	//return min( shieldHealth, damage )
	return permanentDamage
}
*/

// modified
void function HealthRegen_SetCustomRegenDelay( float normalRegenDelay, float fastRegenDelay, float stimRegenDelay )
{
	file.customHealthRegenDelayNormal = normalRegenDelay
	file.customHealthRegenDelayFast = fastRegenDelay
	file.customHealthRegenDelayStim = stimRegenDelay
}

void function HealthRegen_SetCustomRegenRate( float normalRegenRate, float stimRegenRate )
{
	file.customHealthRegenRateNormal = normalRegenRate
	file.customHealthRegenRateStim = stimRegenRate
}

void function HealthRegen_SetAlwaysFastRegen( bool shouldAlways )
{
	file.alwaysFastRegen = shouldAlways
}

void function HealthRegen_Disabled( bool disabled )
{
	file.disableHealthRegen = disabled
}