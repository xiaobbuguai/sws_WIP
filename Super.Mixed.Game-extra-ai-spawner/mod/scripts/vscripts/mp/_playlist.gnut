untyped
global function Playlist_Init

struct
{
	table<entity, bool> entGotLoadoutFromFeaturedMode
} file

void function Playlist_Init()
{
	// featured mode settings
	// ... reworked

	/*
	AddCallback_OnPlayerRespawned( FeaturedModeSettingsSetupPilotLoadouts )
	AddCallback_OnPilotBecomesTitan( FeaturedModeSettingsSetupTitanLoadouts )
	
	if ( IsFeaturedMode( "all_holopilot" ) || IsFeaturedMode( "all_grapple" ) || 
		 IsFeaturedMode( "all_phase" ) || IsFeaturedMode( "all_ticks" ) || 
		 IsFeaturedMode( "rocket_arena" ) || IsFeaturedMode( "shotguns_snipers" ) || 
		 IsFeaturedMode( "tactikill" ) || IsFeaturedMode( "amped_tacticals" ) )
		 SetLoadoutGracePeriodEnabled( false )
	
	// iron lts rules
	if ( HasIronRules() ) 
		Riff_ForceTitanExitEnabled( eTitanExitEnabled.Never )
	*/

	AddCallback_OnPlayerGetsNewPilotLoadout( FeaturedModeSettingsSetupPilotLoadouts )
	AddCallback_OnTitanGetsNewTitanLoadout( FeaturedModeSettingsSetupTitanLoadouts )
}

bool function IsFeaturedMode( string modeName )
{
	return GetCurrentPlaylistVar( "featured_mode_" + modeName ) == "1"
}

// ... reworked
/*
void function FeaturedModeSettingsSetupPilotLoadouts( entity player )
{
	bool shouldChangeLoadout = false

	// create loadout struct
	PilotLoadoutDef modifiedLoadout = clone GetActivePilotLoadout( player )

	if ( IsFeaturedMode( "all_holopilot" ) )
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_holopilot"
	}
		
	if ( IsFeaturedMode( "all_grapple" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_grapple"
		modifiedLoadout.specialMods = [ "all_grapple" ]
	}
		
	if ( IsFeaturedMode( "all_phase" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_shifter"
		modifiedLoadout.specialMods = [ "all_phase" ]
	}
		
	if ( IsFeaturedMode( "all_ticks" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.ordnance = "mp_weapon_frag_drone"
		modifiedLoadout.ordnanceMods = [ "all_ticks" ]
	}
	
	if ( IsFeaturedMode( "rocket_arena" ) )
	{	
		// this crashes sometimes for some reason
	
		shouldChangeLoadout = true
	
		// have to set attachments too, otherwise we could give invalid mods for this weapon
		modifiedLoadout.primary = "mp_weapon_epg"
		modifiedLoadout.primaryMods = [ "rocket_arena" ]
		modifiedLoadout.primaryAttachments = [ "" ]
		
		// set secondary to whatever one is pistol
		if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
		{
			modifiedLoadout.weapon3 = "mp_weapon_autopistol"
			modifiedLoadout.weapon3Mods = [ "rocket_arena" ]
		}
		else
		{
			modifiedLoadout.secondary = "mp_weapon_autopistol"
			modifiedLoadout.secondaryMods = [ "rocket_arena" ]
		}
		
		modifiedLoadout.meleeMods = [ "rocket_arena" ]
		
		player.GiveExtraWeaponMod( "rocket_arena" )
	}
	
	if ( IsFeaturedMode( "shotguns_snipers" ) )
	{
	
		shouldChangeLoadout = true 
		
		// this one was never released, assuming it just gives you a mastiff and a kraber with quick swap
		modifiedLoadout.primary = "mp_weapon_sniper"
		modifiedLoadout.primaryMods = [ "pas_fast_swap", "pas_fast_ads" ]
		modifiedLoadout.primaryAttachments = [ "" ]
		
		// set secondary to whatever one is pistol
		if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
		{
			modifiedLoadout.weapon3 = "mp_weapon_mastiff"
			modifiedLoadout.weapon3Mods = [ "pas_fast_swap", "pas_run_and_gun" ]
		}
		else
		{
			modifiedLoadout.secondary = "mp_weapon_mastiff"
			modifiedLoadout.secondaryMods = [ "pas_fast_swap", "pas_run_and_gun" ]
		}
	}
	
	// dont wanna give a new loadout if it's not necessary, could break other callbacks
	if ( shouldChangeLoadout )
		GivePilotLoadout( player, modifiedLoadout )
	
	if ( IsFeaturedMode( "tactikill" ) )
		player.GiveExtraWeaponMod( "tactical_cdr_on_kill" )
	
	if ( IsFeaturedMode( "amped_tacticals" ) )
		player.GiveExtraWeaponMod( "amped_tacticals" )
}

void function FeaturedModeSettingsSetupTitanLoadouts( entity player, entity titan )
{
	if ( IsFeaturedMode( "turbo_titans" ) )
	{
		array<string> settingsMods = player.GetPlayerSettingsMods()
		
		// seems to crash if we set both of these at once? idk odd game
		if ( !settingsMods.contains( "pas_mobility_dash_capacity" ) )
		{
			settingsMods.append( "turbo_titan" )
			player.SetPlayerSettingsWithMods( player.GetPlayerSettings(), settingsMods )
		}
	}
}
*/

void function FeaturedModeSettingsSetupPilotLoadouts( entity player, PilotLoadoutDef loadout )
{
	if ( !( player in file.entGotLoadoutFromFeaturedMode ) )
		file.entGotLoadoutFromFeaturedMode[ player ] <- false

	// we don't update loadout if we have pending changes
	if ( file.entGotLoadoutFromFeaturedMode[ player ] )
		return

	bool shouldChangeLoadout = false

	// create loadout struct
	PilotLoadoutDef modifiedLoadout = clone loadout

	if ( IsFeaturedMode( "all_holopilot" ) )
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_holopilot"
	}
		
	if ( IsFeaturedMode( "all_grapple" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_grapple"
		modifiedLoadout.specialMods = [ "all_grapple" ]
	}
		
	if ( IsFeaturedMode( "all_phase" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.special = "mp_ability_shifter"
		modifiedLoadout.specialMods = [ "all_phase" ]
	}
		
	if ( IsFeaturedMode( "all_ticks" ) ) 
	{
		shouldChangeLoadout = true 
		
		modifiedLoadout.ordnance = "mp_weapon_frag_drone"
		modifiedLoadout.ordnanceMods = [ "all_ticks" ]
	}
	
	if ( IsFeaturedMode( "rocket_arena" ) )
	{	
		// this crashes sometimes for some reason
		// what reason?
	
		shouldChangeLoadout = true
	
		// have to set attachments too, otherwise we could give invalid mods for this weapon
		modifiedLoadout.primary = "mp_weapon_epg"
		modifiedLoadout.primaryMods = [ "rocket_arena" ]
		modifiedLoadout.primaryAttachments = [ "" ]
		
		// set secondary to whatever one is pistol
		if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
		{
			modifiedLoadout.weapon3 = "mp_weapon_autopistol"
			modifiedLoadout.weapon3Mods = [ "rocket_arena" ]

			// set AT to useless archer
			modifiedLoadout.secondary = "mp_weapon_rocket_launcher"
			modifiedLoadout.secondaryMods = [ "" ]
		}
		else
		{
			modifiedLoadout.secondary = "mp_weapon_autopistol"
			modifiedLoadout.secondaryMods = [ "rocket_arena" ]
		
			// set AT to useless archer
			modifiedLoadout.weapon3 = "mp_weapon_rocket_launcher"
			modifiedLoadout.weapon3Mods = [ "" ]
		}
		
		modifiedLoadout.meleeMods = [ "rocket_arena" ]
		
		player.GiveExtraWeaponMod( "rocket_arena" )
	}
	
	if ( IsFeaturedMode( "shotguns_snipers" ) )
	{
		shouldChangeLoadout = true 
		
		// this one was never released, assuming it just gives you a mastiff and a kraber with quick swap
		modifiedLoadout.primary = "mp_weapon_sniper"
		modifiedLoadout.primaryMods = [ "pas_fast_swap", "pas_fast_ads" ]
		modifiedLoadout.primaryAttachments = [ "" ]
		
		// set secondary to whatever one is pistol
		if ( GetWeaponInfoFileKeyField_Global( player.GetMainWeapons()[ 1 ].GetWeaponClassName(), "menu_category" ) == "at" )
		{
			modifiedLoadout.weapon3 = "mp_weapon_mastiff"
			modifiedLoadout.weapon3Mods = [ "pas_fast_swap", "pas_run_and_gun" ]
		}
		else
		{
			modifiedLoadout.secondary = "mp_weapon_mastiff"
			modifiedLoadout.secondaryMods = [ "pas_fast_swap", "pas_run_and_gun" ]
		}
	}
	
	// dont wanna give a new loadout if it's not necessary, could break other callbacks
	if ( shouldChangeLoadout )
	{
		// mark as we're changing loadout from this file, so current function won't get called over and over
		file.entGotLoadoutFromFeaturedMode[ player ] = true

		GivePilotLoadout( player, modifiedLoadout )
		file.entGotLoadoutFromFeaturedMode[ player ] = false // clear
	}
	
	if ( IsFeaturedMode( "tactikill" ) )
		player.GiveExtraWeaponMod( "tactical_cdr_on_kill" )
	
	if ( IsFeaturedMode( "amped_tacticals" ) )
		player.GiveExtraWeaponMod( "amped_tacticals" )
}

void function FeaturedModeSettingsSetupTitanLoadouts( entity titan, TitanLoadoutDef loadout )
{
	if ( !( titan in file.entGotLoadoutFromFeaturedMode ) )
		file.entGotLoadoutFromFeaturedMode[ titan ] <- false

	// we don't update loadout if we have pending changes
	if ( file.entGotLoadoutFromFeaturedMode[ titan ] )
		return
	
	bool shouldChangeLoadout = false

	// create loadout struct
	TitanLoadoutDef modifiedLoadout = clone loadout

	if ( IsFeaturedMode( "turbo_titans" ) )
	{
		shouldChangeLoadout = true

		// will crash if we have both mods
		/*
		if ( modifiedLoadout.setFileMods.contains( "pas_mobility_dash_capacity" ) )
			modifiedLoadout.setFileMods.removebyvalue( "pas_mobility_dash_capacity" )

		modifiedLoadout.setFileMods.append( "turbo_titan" ) // this gets applied on player embark
		*/
		// I think vanilla is just replace all passive1 with "turbo_titan"
		// so that pas_mobility_dash_capacity won't be the only passive that will be overwriten
		// wait... OverCore with GiveTitanLoadout() twice can cause player to have 2 electric smoke together...
		// what could I say about it?
		string currentPassive = modifiedLoadout.passive1
		modifiedLoadout.passive1 = "" // remove current passive
		modifiedLoadout.setFileMods.removebyvalue( currentPassive ) // pas_mobility_dash_capacity also gets append into setfile
		modifiedLoadout.setFileMods.append( "turbo_titan" ) // this gets applied on player embark
		// remove overcore effect
		thread RecoverOverCoreEffect( titan )
	}
	
	// dont wanna give a new loadout if it's not necessary, could break other callbacks
	if ( shouldChangeLoadout )
	{
		// mark as we're changing loadout from this file, so current function won't get called over and over
		file.entGotLoadoutFromFeaturedMode[ titan ] = true

		GiveTitanLoadout( titan, modifiedLoadout )
		file.entGotLoadoutFromFeaturedMode[ titan ] = false // clear
	}
}

///// utilities
void function RecoverOverCoreEffect( entity titan )
{
	titan.EndSignal( "OnDestroy" )

	entity soul = titan.GetTitanSoul()
	if ( !IsValid( soul ) )
		return
	soul.EndSignal( "OnDestroy" )

	WaitEndFrame() // wait for titan get smoke weapon
	SoulTitanCore_SetNextAvailableTime( soul, 0.0 )
	titan.TakeOffhandWeapon( OFFHAND_INVENTORY )
}