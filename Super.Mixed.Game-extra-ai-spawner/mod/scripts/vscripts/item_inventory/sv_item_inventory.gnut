global function Sv_ItemInventory_Init
global function SvPlayerInventory_ItemCount
global function PlayerInventory_CountTurrets
global function PlayerInventory_RefreshEquippedState
global function PlayerInventory_StartCriticalSection
global function PlayerInventory_EndCriticalSectionForWeaponOnEndFrame

global function PlayerInventory_PushInventoryItem
global function PlayerInventory_PushInventoryItemByBurnRef
global function PlayerInventory_PopInventoryItem
global function PlayerInventory_TakeAllInventoryItems
global function PlayerInventory_CountBurnRef

// modified utility
global function PlayerInventory_GetItemStructByBurnRef
global function PlayerInventory_GetInventoryItems
global function PlayerInventory_ReplaceInventoryItemByBurnRef
global function PlayerInventory_ReplaceAllInventoryItemTypeByBurnRef

struct
{
	table<entity, array<InventoryItem> > playerInventoryStacks
} file

void function Sv_ItemInventory_Init()
{
	AddCallback_OnClientConnected( Sv_ItemInventory_OnClientConnected )
	AddCallback_OnPlayerGetsNewPilotLoadout( Sv_ItemInventory_OnPlayerGetsNewPilotLoadout )
	AddCallback_GameStateEnter( eGameState.Prematch, PrematchClearInventory )

	// modified
	RegisterSignal( "OnGiveInventoryItem" )
}

void function Sv_ItemInventory_OnClientConnected( entity player )
{
	file.playerInventoryStacks[ player ] <- []
}

void function PrematchClearInventory()// vanilla behavior
{
	foreach( entity player in GetPlayerArray() )
	{
		PlayerInventory_TakeAllInventoryItems( player )
	}
}

void function Sv_ItemInventory_OnPlayerGetsNewPilotLoadout( entity player, PilotLoadoutDef newPilotLoadout )
{
	PlayerInventory_UpdateActiveInventoryItem( player )
}

void function PlayerInventory_UpdateActiveInventoryItem( entity player )
{
	array<InventoryItem> playerInventoryStack = file.playerInventoryStacks[ player ]
	if ( playerInventoryStack.len() > 0 ) 
	{
		InventoryItem topInventoryItem = playerInventoryStack[ playerInventoryStack.len() - 1 ]
		PlayerInventory_GiveInventoryItem( player, topInventoryItem, true ) // ignore last reward takeoff wait, force update
	}
}

int function SvPlayerInventory_ItemCount( entity player )
{
	return file.playerInventoryStacks[ player ].len()
}

int function PlayerInventory_CountTurrets( entity player )
{
	int turretCount = 0

	foreach ( inventoryItem in file.playerInventoryStacks[ player ] )
		if ( inventoryItem.weaponRef == "mp_ability_turretweapon" )
			turretCount += 1

	return turretCount
}

int function PlayerInventory_CountBurnRef( entity player, string burnRef )
{
	int count = 0

	foreach ( inventoryItem in file.playerInventoryStacks[ player ] )
		if ( inventoryItem.itemType == eInventoryItemType.burnmeter )
			if ( inventoryItem.burnReward.ref == burnRef )
				count += 1

	return count
}

void function PlayerInventory_TakeInventoryItem( entity player, bool ignoreWait = false )
{
	entity preExistingWeapon = player.GetOffhandWeapon( OFFHAND_INVENTORY )
	if( !IsValid( preExistingWeapon ) )
		return
	
	if ( !ignoreWait )
	{
		player.EndSignal( "OnDestroy" )
		preExistingWeapon.EndSignal( "OnDestroy" ) // anti-crash!
		waitthread WaitForInventoryWeaponFireEnd( player, preExistingWeapon ) // wait until weapon's fire animation end
	}

	player.TakeWeaponNow( preExistingWeapon.GetWeaponClassName() )
}

void function WaitForInventoryWeaponFireEnd( entity player, entity weapon )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	weapon.EndSignal( "OnDestroy" )

	var fireMode = weapon.GetWeaponInfoFileKeyField( "fire_mode" ) // no support for weapon mods!
	bool isOffhandInstant = fireMode == "offhand_instant"

	if ( isOffhandInstant ) // for offhand instant, we wait a frame
		WaitFrame()
	else // for normal offhand weapons, we wait until player holsters them
	{
		while ( player.GetActiveWeapon() == weapon )
			WaitFrame()
	}
}

void function PlayerInventory_GiveInventoryItem( entity player, InventoryItem inventoryItem, bool ignoreWait = false )
{
	player.Signal( "OnGiveInventoryItem" ) // stop last inventory updating may in progress
	if ( !ignoreWait )
	{
		player.EndSignal( "OnDestroy" ) // anti-crash
		player.EndSignal( "OnGiveInventoryItem" ) // prevent multiple inventory updating in progress together
	}

	array<string> mods = []
	if ( inventoryItem.itemType == eInventoryItemType.burnmeter ) 
	{
		mods.append( "burn_card_weapon_mod" ) // default mod for a burnmeter reward
		if ( inventoryItem.burnReward.extraWeaponMod != "" )
			mods.append( inventoryItem.burnReward.extraWeaponMod )
	}

	// ensure inventory slot isn't full to avoid crash
	if ( !ignoreWait )
		waitthread PlayerInventory_TakeInventoryItem( player ) // wait until player finished use then takeoff
	else
		PlayerInventory_TakeInventoryItem( player, true ) // ignore last reward takeoff wait, force update
	
	// defensive fix if PlayerInventory_TakeInventoryItem() had failed or reward has been recently pushed again
	entity preExistingWeapon = player.GetOffhandWeapon( OFFHAND_INVENTORY )
	if ( IsValid( preExistingWeapon ) )
		player.TakeWeaponNow( preExistingWeapon.GetWeaponClassName() )

	// start giving inventory
	player.GiveOffhandWeapon( inventoryItem.weaponRef, OFFHAND_INVENTORY, mods )
	if ( inventoryItem.itemType == eInventoryItemType.burnmeter ) // is inventory a burncard?
	{
		entity weapon = player.GetOffhandWeapon( OFFHAND_INVENTORY )
		weapon.e.burnReward = inventoryItem.burnReward.ref // set up use effect
	}
}

void function PlayerInventory_PushInventoryItem( entity player, InventoryItem inventoryItem )
{
	file.playerInventoryStacks[ player ].append( inventoryItem )
	player.SetPlayerNetInt( "itemInventoryCount", file.playerInventoryStacks[ player ].len() )

	PlayerInventory_GiveInventoryItem( player, inventoryItem, true ) // ignore last reward takeoff wait, force update
}

void function PlayerInventory_PushInventoryItemByBurnRef( entity player, string burnRef )
{
	PlayerInventory_PushInventoryItem( player, PlayerInventory_GetItemStructByBurnRef( burnRef ) )
}

void function PlayerInventory_PopInventoryItem( entity player )
{
	array<InventoryItem> playerInventoryStack = file.playerInventoryStacks[ player ]

	if ( playerInventoryStack.len() > 0 ) 
	{
		InventoryItem topInventoryItem = playerInventoryStack.pop()
		player.SetPlayerNetInt( "itemInventoryCount", playerInventoryStack.len() )

		if ( playerInventoryStack.len() > 0 ) 
		{
			InventoryItem nextInventoryItem = playerInventoryStack[ playerInventoryStack.len() - 1 ]
			thread PlayerInventory_GiveInventoryItem( player, nextInventoryItem )
		} 
		else 
		{
			thread PlayerInventory_TakeInventoryItem( player )
		}
	}

	return
}

void function PlayerInventory_TakeAllInventoryItems( entity player )
{
	file.playerInventoryStacks[ player ].clear()
	PlayerInventory_TakeInventoryItem( player, true ) // ignore waiting caused by mp_ability_burncardweapon
	player.SetPlayerNetInt( "itemInventoryCount", 0 )
	return
}

void function PlayerInventory_RefreshEquippedState( entity player )
{
	
}

void function PlayerInventory_StartCriticalSection( entity player )
{

}

void function PlayerInventory_EndCriticalSectionForWeaponOnEndFrame( entity weapon )
{

}


// modified utility
InventoryItem function PlayerInventory_GetItemStructByBurnRef( string burnRef )
{
	InventoryItem inventoryItem
	inventoryItem.itemType = eInventoryItemType.burnmeter
	inventoryItem.burnReward = BurnReward_GetByRef( burnRef )
	inventoryItem.weaponRef = inventoryItem.burnReward.weaponName

	return inventoryItem
}

array<InventoryItem> function PlayerInventory_GetInventoryItems( entity player )
{
	return file.playerInventoryStacks[ player ]
}

void function PlayerInventory_ReplaceInventoryItemByBurnRef( entity player, string burnRef, int inventoryIndex )
{
	if ( file.playerInventoryStacks[ player ].len() < inventoryIndex - 1 )
		return

	file.playerInventoryStacks[ player ][ inventoryIndex ] = PlayerInventory_GetItemStructByBurnRef( burnRef )
	PlayerInventory_UpdateActiveInventoryItem( player )
}

void function PlayerInventory_ReplaceAllInventoryItemTypeByBurnRef( entity player, string burnRefToReplace, string burnRef )
{
	foreach ( int index, item in file.playerInventoryStacks[ player ] )
	{
		if ( item.burnReward.ref == burnRefToReplace )
			file.playerInventoryStacks[ player ][ index ] = PlayerInventory_GetItemStructByBurnRef( burnRef )
	}
	PlayerInventory_UpdateActiveInventoryItem( player )
}