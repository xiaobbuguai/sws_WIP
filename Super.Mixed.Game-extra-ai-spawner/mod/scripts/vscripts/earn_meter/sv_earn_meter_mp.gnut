untyped
global function Sv_EarnMeterMP_Init
global function EarnMeterMP_SetTitanLoadout
global function EarnMeterMP_SetPassiveMeterGainEnabled
global function EarnMeterMP_SetBoostByRef

// modified settings...
global function EarnMeterMP_SetPassiveGainProgessEnable

// when client display a 99% frac, server actually has "0.989999"
// needs to add a small amount to avoid earnmeter displays as 99% but player can't earn goal
// this also fixes player can't gain reward when their meter is right at required value
const float EARNMETER_FRAC_FIX				= 0.000001

const float EARNMETER_GAIN_FRAC				= 0.01 + EARNMETER_FRAC_FIX
const float EARNMETER_GAIN_INTERVAL			= 5.0
const float EARNMETER_GAIN_INTERVAL_MIN		= 1.0
const float EARNMETER_GAIN_MAX_LEVEL		= 0.9 // if time reaches this percentage, we will use EARNMETER_GAIN_INTERVAL_MIN

struct
{
	// these are purely in-file and no need to change
	array<string> catchedUpUIDs // for northstar specific
	// in vanilla, only passive gain triggers EarnMeter_DecayHold()
	table<entity, float> playerLastPassiveGainTime
	//

	float playingStartTime
	bool passiveMeterGainEnabled = true

	// vanilla behavior settings...
	table<int, float> teamPassiveMeterGainInterval // gets updated based on player's calculation
	table<entity, float> playerPassiveMeterGainInterval
	bool passiveGainProgressEnabled = false // vanilla seems only enable this in few gamemodes( mostly titan allowed modes )
} file

void function Sv_EarnMeterMP_Init()
{
	if ( !EARNMETER_ENABLED )
		return

	// shouldn't use SetupPlayerEarnMeter on connected
	//AddCallback_OnClientConnected( SetupPlayerEarnMeter )
	AddCallback_OnClientConnected( OnClientConnected )
	AddCallback_GameStateEnter( eGameState.Playing, OnPlaying ) // can't change boost after prematch
	AddCallback_OnPlayerRespawned( OnPlayerRespawned )
	// move here from sv_earn_meter.gnut
	RegisterSignal( "EarnMeterDecayThink" )
	RegisterSignal( "OverDriveClearOnDeath" )
	// earnmeter progress
	RegisterSignal( "ProgessFracCalculate" )
}

void function EarnMeterMP_SetTitanLoadout( entity player )
{
	if ( EarnMeterMP_IsTitanEarnGametype() )
	{
		string titanClass = GetTitanLoadoutForPlayer( player ).titanClass
		// Add TitanFrameWork compatibility
		// Codes are from https://northstar.thunderstore.io/package/The_Peepeepoopoo_man/Titanframework/
		#if EXTRA_SPAWNER_HAS_TITAN_FRAMEWORK
			if(GetModdedTitanClasses().contains(titanClass))
				titanClass = GetModdedTitanClassForMods(titanClass)
		#endif
		//PlayerEarnMeter_SetGoal( player, EarnObject_GetByRef( GetTitanLoadoutForPlayer( player ).titanClass ) )
		PlayerEarnMeter_SetGoal( player, EarnObject_GetByRef( titanClass ) )
	}
	else
		PlayerEarnMeter_SetGoal( player, PlayerEarnMeter_GetReward( player ) )
}

// modified settings...
void function EarnMeterMP_SetPassiveMeterGainEnabled( bool enabled )
{
	file.passiveMeterGainEnabled = enabled
}

void function EarnMeterMP_SetPassiveGainProgessEnable( bool enabled )
{
	file.passiveGainProgressEnabled = enabled
}
//

void function OnClientConnected( entity player )
{
	SetupPlayerEarnMeter( player )

	// catchup bonus for late joiners
	thread DelayedCatchUpEarnMeter( player )
	// note: needs to delay otherwise it won't work
	// todo: maths on this is fine but for some reason it won't set correctly, could be getting reset somewhere?
	// PlayerEarnMeter_AddOwnedFrac( player, ( ( Time() - file.playingStartTime ) / 4.0 ) * 0.01 )

	// vanilla behavior recover
	file.playerLastPassiveGainTime[ player ] <- 0.0
	file.playerPassiveMeterGainInterval[ player ] <- EARNMETER_GAIN_INTERVAL

	// progressing earnmeter frac
	EarnMeterMP_ProgessFracCalculate( player )
}

void function SetupPlayerEarnMeter( entity player )
{
	PlayerEarnMeter_Reset( player )

	string burncardRef = GetSelectedBurnCardRef( player )
	EarnMeterMP_SetBoostByRef( player, burncardRef )
}

void function DelayedCatchUpEarnMeter( entity player )
{
	WaitFrame() // wait for earnmeter being reset
	// for northstar, since players can re-connect very easily, we use catchedUpUIDs for storing
	if ( GetGameState() >= eGameState.Playing )
	{
		if( IsValid( player ) && !file.catchedUpUIDs.contains( player.GetUID() ) )
			PlayerEarnMeter_AddOwnedFrac( player, ( ( Time() - file.playingStartTime ) / EARNMETER_GAIN_INTERVAL ) * EARNMETER_GAIN_FRAC )
	}

	file.catchedUpUIDs.append( player.GetUID() ) // disable catchup for this UID
}

void function OnPlaying()
{
	file.playingStartTime = Time()
	foreach ( entity player in GetPlayerArray() )
		SetupPlayerEarnMeter( player )

	if ( Riff_BoostAvailability() != eBoostAvailability.Disabled )
		SetCallback_EarnMeterRewardEarned( EarnMeterMP_BoostEarned )

	// do this in playing so that gamemodes/maps can disable and this'll take affect
	if ( EarnMeterMP_IsTitanEarnGametype() ) // settitanavailable when earnmeter full
	{
		Riff_ForceTitanAvailability( eTitanAvailability.Custom ) // doesn't seem to affect anything aside from preventing some annoying client stuff
		svGlobal.titanAvailabilityCheck = IsTitanAvailable
	}

	SetCallback_EarnMeterGoalEarned( EarnMeterMP_TitanEarned )
}

void function OnPlayerRespawned( entity player )
{
	thread EarnMeterMP_PlayerLifeThink( player )

	// what is this call?
	//if ( PlayerEarnMeter_IsRewardAvailable( player ) )
	//	EarnMeterMP_BoostEarned( player )
}

void function EarnMeterMP_ReplaceReward( entity player, EarnObject reward, float rewardFrac )
{
	PlayerEarnMeter_Reset( player )
	if ( reward.id < 0 )
		return
	
	// fix reward icon
	if ( player.IsTitan() || Riff_BoostAvailability() != eBoostAvailability.Disabled )
	{
		PlayerEarnMeter_SetReward( player, reward )
		PlayerEarnMeter_SetRewardFrac( player, rewardFrac )
		// only enable reward if our last reward is valid
		if( ( PlayerEarnMeter_GetMode( player ) == eEarnMeterMode.DEFAULT || PlayerEarnMeter_GetMode( player ) == eEarnMeterMode.CORE )
			&& PlayerEarnMeter_GetRewardFrac( player ) != 0 )
			PlayerEarnMeter_EnableReward( player )
	}
}

void function EarnMeterMP_PlayerLifeThink( entity player )
{
	player.EndSignal( "OnDeath" )
	player.EndSignal( "OnDestroy" )

	EarnObject pilotReward = PlayerEarnMeter_GetReward( player ) 
	float pilotRewardFrac = PlayerEarnMeter_GetRewardFrac( player )
	int lastEarnMeterMode = PlayerEarnMeter_GetMode( player )

	// on respawn: If titan avaliable and we're nearly reach it, do a dialogue
	TryTitanSoonAnnouncement( player )
	// move here from sv_earn_meter.gnut
	// in vanilla, only passive gain triggers EarnMeter_DecayHold()
	// which means you'll drop less overdrive when the match is near end
	thread EarnMeterDecayThink( player )

	OnThreadEnd(
		function() : ( player, pilotReward, pilotRewardFrac )
		{
			if ( !IsValid( player ) )
				return

			// Resets the meter to the pilot version if the player dies in a titan or while their titan is alive (otherwise they can be stuck with e-smoke)
			int earnMode = PlayerEarnMeter_GetMode( player )
			if( earnMode != eEarnMeterMode.DEFAULT )
				EarnMeterMP_ReplaceReward( player, pilotReward, pilotRewardFrac )
		}
	)

	while ( true )
	{
		if( GetGameState() < eGameState.Playing ) // Prematch
			file.playerLastPassiveGainTime[ player ] = Time() // reset gain timer
		
		int desiredEarnMeterMode
		entity petTitan = player.GetPetTitan()
		entity soul = player.GetTitanSoul() // move out of if-else cases

		if ( player.IsTitan() )
		{
			file.playerLastPassiveGainTime[ player ] = Time() // staying in titan should reset earnmeter gain timer
			
			if ( IsValid( soul ) ) // stupid anti-crash, possibly no need
			{
				//entity soul = player.GetTitanSoul() // move out of if-else cases
				if ( SoulTitanCore_GetExpireTime( soul ) > Time() )
					desiredEarnMeterMode = eEarnMeterMode.CORE_ACTIVE
				else
					desiredEarnMeterMode = eEarnMeterMode.CORE
			}
		}
		//else if ( IsValid( player.GetPetTitan() ) )
		else if ( IsValid( petTitan ) )
		{
			file.playerLastPassiveGainTime[ player ] = Time() // having a pet titan should reset earnmeter gain timer
			desiredEarnMeterMode = eEarnMeterMode.PET
		}
		else
			desiredEarnMeterMode = eEarnMeterMode.DEFAULT

		if ( desiredEarnMeterMode != lastEarnMeterMode )
		{
			PlayerEarnMeter_SetMode( player, desiredEarnMeterMode )
			if ( lastEarnMeterMode == eEarnMeterMode.DEFAULT ) // Set these here in case the player changed boost during the match (e.g. in dropship)
			{
				pilotReward = PlayerEarnMeter_GetReward( player ) 
				pilotRewardFrac = PlayerEarnMeter_GetRewardFrac( player )
			}

			if ( desiredEarnMeterMode == eEarnMeterMode.DEFAULT ) // Only occurs when auto titan dies. Resets reward progress and reverts it back to boost.
			{
				EarnMeterMP_ReplaceReward( player, pilotReward, pilotRewardFrac )
				PlayerEarnMeter_EnableGoal( player ) // re-enable goal
			}
			else if ( desiredEarnMeterMode == eEarnMeterMode.CORE ) // Replace the pilot's earn meter reward with smoke when they enter their titan.
			{
				EarnMeterMP_ReplaceReward( player, EarnObject_GetByRef( "core_electric_smoke" ), CORE_SMOKE_FRAC )
				//if( SoulTitanCore_GetNextAvailableTime( player.GetTitanSoul() ) >= CORE_SMOKE_FRAC )
				if ( IsValid( soul ) ) // stupid anti-crash, possibly no need
				{
					// modified here: if titan being disabled reward, we remove their smoke icon
					if( SoulTitanCore_GetNextAvailableTime( soul ) >= CORE_SMOKE_FRAC || !PlayerEarnMeter_GetSoulEarnMeterSmokeEnabled( soul ) )
						PlayerEarnMeter_SetRewardUsed( player )
				}
			}
			else if ( desiredEarnMeterMode == eEarnMeterMode.CORE_ACTIVE ) // Enables smoke after core use (doesn't show up during active, so looks fine)
			{
				// shouldn't show electric smoke icon if titan has PAS_HYPER_CORE, but whatever I don't want to fix it
				// this is a vanilla bug... weird
				// now tried to fix it in sh_titancore_utility.gnut, call a PlayerEarnMeter_SetRewardUsed() after core use
				PlayerEarnMeter_EnableReward( player )
			}

			lastEarnMeterMode = desiredEarnMeterMode
		}

		// below is default earnmeter looping case
		if ( lastEarnMeterMode == eEarnMeterMode.DEFAULT )
		{
			//print( "Reward enabled: " + string( PlayerEarnMeter_IsRewardEnabled( player ) ) )

			// Removed... client doesn't seem to show "titan ready" in goal ready case
			// the alerts only shown when SetTitanAvailable() is used
			// looping to refresh goal seems bad
			/*
			if ( PlayerEarnMeter_GetOwnedFrac( player ) < 1.0 )
				PlayerEarnMeter_DisableGoal( player )
			else if ( player.GetPlayerNetInt( "goalState" ) != eRewardState.UNAVAILABLE )
			{
				// if goal is enabled then the client will show "titan ready" alerts even if it isn't
				// the problem is that if the goal isn't available when we fill the earnmeter, then it won't make it available
				// so unfortunately we have to do this manually
				player.SetPlayerNetInt( "goalState", eRewardState.AVAILABLE )
				PlayerEarnMeter_RefreshGoal( player )
			}
			*/

			if ( file.passiveMeterGainEnabled && Time() - file.playerLastPassiveGainTime[ player ] >= file.playerPassiveMeterGainInterval[ player ] )
			{
				PlayerEarnMeter_AddOwnedFrac( player, EARNMETER_GAIN_FRAC )
				file.playerLastPassiveGainTime[ player ] = Time() // update last passive gain time
			}
		}

		WaitFrame()
	}
}

void function TryTitanSoonAnnouncement( entity player )
{
	//WaitFrame() // required for sometimes player try "RespawnAsTitan()", was fixed inside it
	if( !IsValid( player ) )
		return
	if( ShouldDoTitanSoonAnnouncement( player ) )
	{
		//print( "doing titan soon announcement" )
		PlayFactionDialogueToPlayer( "mp_titanSoon", player )
	}
}

bool function ShouldDoTitanSoonAnnouncement( entity player )
{
	if( 
		EarnMeterMP_IsTitanEarnGametype() && 
		PlayerEarnMeter_GetOwnedFrac( player ) >= 0.8 && 
		!IsTitanAvailable( player ) && 
		!player.IsTitan() && 
		!IsValid( player.GetPetTitan() ) &&
		GetGameState() == eGameState.Playing
	  )
		return true

	return false
}

void function EarnMeterMP_BoostEarned( entity player )
{
	// debug
	//print ( "RUNNING EarnMeterMP_BoostEarned()" )

	// Can't have smoke earned via meter. Otherwise, Auto Titan could hit reward frac and get nothing
	if( player.IsTitan() )
		return

	EarnObject earnobject = PlayerEarnMeter_GetReward( player )
	BurnReward burncard = BurnReward_GetByRef( earnobject.ref )

	while ( burncard.ref == "burnmeter_random_foil" )
		burncard = BurnReward_GetRandom()

	// rework northstar complicated checks. why don't we just get reward count before applying?
	int rewardCount = BurnMeter_GetLimitedRewardCount( player, burncard.ref )
	//for ( int i = 0; i < BurnMeter_GetLimitedRewardCount( player, burncard.ref ); i++ )
	for ( int i = 0; i < rewardCount; i++ )
		BurnMeter_GiveRewardDirect( player, burncard.ref )

	PlayerEarnMeter_DisableReward( player )
}

void function EarnMeterMP_TitanEarned( entity player )
{
	if ( EarnMeterMP_IsTitanEarnGametype() )
	{
		if( !player.IsTitan() && !IsValid( player.GetPetTitan() ) && !IsTitanAvailable( player ) ) // sometimes trigger this when "Respawn As Titan", should do a check.
		{
			SetTitanAvailable( player )
			Remote_CallFunction_Replay( player, "ServerCallback_TitanReadyMessage" ) // broken for some reason
		}
	}
	else
	{
		float oldRewardFrac = PlayerEarnMeter_GetRewardFrac( player ) // get reward frac before it gets reset
		PlayerEarnMeter_Reset( player )
		// don't enable reward if we've disabled it, otherwise the icon will be shown incorrectly
		if ( Riff_BoostAvailability() != eBoostAvailability.Disabled )
		{
			if ( oldRewardFrac > 0 )
			{
				PlayerEarnMeter_SetRewardFrac( player, oldRewardFrac )
				PlayerEarnMeter_EnableReward( player )
			}
		}
		PlayerEarnMeter_EnableGoal( player ) // re-enable goal
	}
}

void function EarnMeterMP_SetBoostByRef( entity player, string boostRef ) 
{
	EarnObject earnobject = EarnObject_GetByRef( boostRef )
	BurnReward burncard = BurnReward_GetByRef( boostRef )

	if ( Riff_BoostAvailability() != eBoostAvailability.Disabled )
	{
		PlayerEarnMeter_SetReward( player, earnobject ) // pretty sure this works?
		PlayerEarnMeter_SetRewardFrac( player, burncard.cost )
		PlayerEarnMeter_EnableReward( player )
	}

	// goal should always been enabled
	PlayerEarnMeter_EnableGoal( player )
	if ( EarnMeterMP_IsTitanEarnGametype() )
	{
		string titanClass = GetTitanLoadoutForPlayer( player ).titanClass
		// Add TitanFrameWork compatibility
		// Codes are from https://northstar.thunderstore.io/package/The_Peepeepoopoo_man/Titanframework/
		#if EXTRA_SPAWNER_HAS_TITAN_FRAMEWORK
			if(GetModdedTitanClasses().contains(titanClass))
				titanClass = GetModdedTitanClassForMods(titanClass)
		#endif
		//PlayerEarnMeter_SetGoal( player, EarnObject_GetByRef( GetTitanLoadoutForPlayer( player ).titanClass ) )
		PlayerEarnMeter_SetGoal( player, EarnObject_GetByRef( titanClass ) )
	}
	else
		PlayerEarnMeter_SetGoal( player, earnobject )
}

// move here from sv_earn_meter.gnut
// in vanilla, only passive gain triggers EarnMeter_DecayHold()
// which means you'll drop less overdrive when the match is near end
void function EarnMeterDecayThink( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.EndSignal( "OnDeath" )
	player.Signal( "EarnMeterDecayThink" ) // prevent this instance running multiple times
	player.EndSignal( "EarnMeterDecayThink" )

	thread OverDriveClearOnDeath( player )

	//float startTime = Time()
	while ( true )
	{
		WaitFrame() // wait before each loop
		//float frameTime = Time() - startTime
		//startTime = Time()

		entity titan = GetTitanFromPlayer( player )
		if ( IsValid( titan ) ) // wait for titan being destroyed
			continue

		// decay hold think
		float decayHoldEndTime = file.playerLastPassiveGainTime[ player ] + EarnMeter_DecayHold() + 0.1 // add 0.1s more for better handle min interval
		// if player in decay hold, we never reduce their earnmeter frac
		if ( Time() < decayHoldEndTime )
			continue

		float earnedValue = PlayerEarnMeter_GetEarnedFrac( player )
		float ownedValue = PlayerEarnMeter_GetOwnedFrac( player )
		if ( earnedValue > ownedValue )
		{
			// 10% over 20 seconds
			float decayRate = ( 1.0 / 135.0 ) * 0.1 // 0.1 is for 1tick
			float diff = earnedValue - ownedValue
			decayRate = min( decayRate, diff )
			PlayerEarnMeter_AddEarnedFrac( player, -decayRate )
		}
	}
}

void function OverDriveClearOnDeath( entity player )
{
	player.EndSignal( "OnDestroy" )
	player.Signal( "OverDriveClearOnDeath" ) // prevent this instance running multiple times
	player.EndSignal( "OverDriveClearOnDeath" )
	player.WaitSignal( "OnDeath" )

	float earnedValue = PlayerEarnMeter_GetEarnedFrac( player )
	float ownedValue = PlayerEarnMeter_GetOwnedFrac( player )
	if ( earnedValue > ownedValue )
	{
		float diff = earnedValue - ownedValue
		PlayerEarnMeter_AddEarnedFrac( player, -diff )
	}
}

// progressFrac calculate
// vanilla seems only enable this in few gamemodes( mostly titan allowed modes such as aitdm and tdm )
void function EarnMeterMP_ProgessFracCalculate( entity player )
{
	thread EarnMeterMP_ProgessFracCalculate_Threaded( player )
}

void function EarnMeterMP_ProgessFracCalculate_Threaded( entity player )
{
	// no support for FFA and roundbased mode
	if ( IsFFAGame() || IsRoundBased() )
		return
	
	player.EndSignal( "OnDestroy" )
	// prevent this instance running multiple times
	player.Signal( "ProgessFracCalculate" )
	player.EndSignal( "ProgessFracCalculate" )

	// progressFrac calculate
	while ( true )
	{
		WaitFrame() // always wait before each loop

		int playerTeam = player.GetTeam()
		// init team gain inverval
		if ( !( playerTeam in file.teamPassiveMeterGainInterval ) )
			file.teamPassiveMeterGainInterval[ playerTeam ] <- EARNMETER_GAIN_INTERVAL

		// not enabled settings or in prematch
		if ( !file.passiveGainProgressEnabled || GetGameState() < eGameState.Playing )
		{
			// reset to default value
			file.playerPassiveMeterGainInterval[ player ] = EARNMETER_GAIN_INTERVAL
			file.teamPassiveMeterGainInterval[ playerTeam ] = EARNMETER_GAIN_INTERVAL
			continue
		}

		// sudden death or epilogue: always maxnium earnmeter gain
		// vanilla doesn't seem to have this behavior
		// they just keep the value calculated from playing state
		if ( GetGameState() == eGameState.Epilogue || GetGameState() == eGameState.SuddenDeath )
		{
			//file.playerPassiveMeterGainInterval[ player ] = EARNMETER_GAIN_INTERVAL_MIN
			file.playerPassiveMeterGainInterval[ player ] = file.teamPassiveMeterGainInterval[ playerTeam ]
			continue
		}

		// generic calculation while game playing
		if ( GetGameState() == eGameState.Playing )
		{
			// calculate max score level
			int totalScore = GameMode_GetScoreLimit( GAMETYPE )
			if( IsRoundBased() )
				totalScore = GameMode_GetRoundScoreLimit( GAMETYPE )
			int maxLevelScore = int( totalScore * EARNMETER_GAIN_MAX_LEVEL )
		
			// calculate based on enemy team scores
			int enemyTeam = GetOtherTeam( playerTeam )
			int enemyTeamScore = GameRules_GetTeamScore( enemyTeam )
			float scoreLevel = float( enemyTeamScore ) / float( maxLevelScore )

			// get max level
			float gainLevel = scoreLevel
			if ( gainLevel >= 1.0 )
				gainLevel = 1.0
			//print( "gainLevel: " + string( gainLevel ) )
			// get max time reduction
			float maxIntervalReduction = EARNMETER_GAIN_INTERVAL - EARNMETER_GAIN_INTERVAL_MIN

			file.playerPassiveMeterGainInterval[ player ] = EARNMETER_GAIN_INTERVAL - ( maxIntervalReduction * gainLevel )
			//print( "passiveMeterGainInterval: " + string( file.playerPassiveMeterGainInterval[ player ] ) )

			// update team gain
			file.teamPassiveMeterGainInterval[ playerTeam ] = file.playerPassiveMeterGainInterval[ player ]

			continue
		}
	}
}