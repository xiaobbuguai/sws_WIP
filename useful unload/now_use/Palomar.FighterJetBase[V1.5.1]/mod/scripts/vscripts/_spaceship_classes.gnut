/*
** Read this to understand how classes work in squirrel:
** https://r2northstar.readthedocs.io/en/latest/native/class.html
*/

untyped
global var Spaceship // This is the class! DON'T PUT ANYTHING ELSE IN THIS!

global function SpaceShipClassesInit


// table to get the corresponding instance of a prop
global table< entity, var> spaceships

global function CreateWeaponTracer

const FX_MEGA_TURRECT_IMPACT_EXPLOSION = $"P_impact_exp_XLG_air"

const SPACESHIP_MAX_LANDING_HEIGHT = 400




void function SpaceShipClassesInit()
{
	// Precache models
	PrecacheModel($"models/vehicle/straton/straton_imc_gunship_01.mdl")
	PrecacheModel($"models/vehicle/crow_dropship/crow_dropship_hero.mdl")
	PrecacheModel($"models/vehicle/goblin_dropship/goblin_dropship_hero.mdl")
	PrecacheModel( $"models/containers/pelican_case_large.mdl")


	//Precache fx
	PrecacheParticleSystem( FX_MEGA_TURRECT_IMPACT_EXPLOSION )

	// add a property to the player class to store their ship
	CPlayer.spaceship <- null

	class Spaceship {
		// ship.GetOwner() for pilot
		config = null // table			| config data for different spaceship types
		ship = null // CDynamicProp		| holds the ingame prop of the ship
		mover = null // script_mover	| moves the player and prop
		engineOn = false // boolean		| controls if the spaceship is allowed to move
		inManeuver = false // boolean	| true if the ship is landing / starting
		origMoveTime = null //float     | the original movetime of the shipclass
		freeView = false // boolean		| true when the player is not changing directions with view
		startManeuverTime = 1.5 //float | how long the starting sequence takes
		landingManeuverTime = 1.5//float| how long the landing sequence takes
		embarkedplayers = {} //table    | tracks players who are in the ship
		soundsplayed =[] //array        | tracks what info sounds have been played (eg "critical damge" or smth like that)
		readytofire = true //bool		| tracks weapon cooldowns in StartWeaponSystemCooldown() and ShootWeaponSystem()
		weaponsactive = false //bool 	| wether or not the player is currently holding fire
		gunnerView = false //bool       | determins if gunnerview should be enabled
		occupationent = null //entity 	| used to track if a ship is already somewhere(NOT IF THE SHIP IS CRASHING , that uses config values)

		// ships can't be damaged by a ship of the same team. Also applies to TEAM_UNSASSIGNED
		constructor( string type , var origin = <0,0,0>, var angles = <0,0,0>, team = TEAM_UNASSIGNED )
		{
			expect vector( origin )
			expect vector( angles )

			this.config = this.ConfigFromType( type )
			this.embarkedplayers["driver"] <- null
			this.embarkedplayers["shooter"] <- null

			//create a temporary box that only stays until the ship takes off (used for detection of the straton by other mods , since that ship doesnt have a proper hitbox)
			this.occupationent = CreatePropDynamic($"models/containers/pelican_case_large.mdl",<0,0,0>,<0, 0, 0>,SOLID_VPHYSICS)
			this.occupationent.SetOrigin( origin + < 0, 0, expect float( this.config.groundToFeet ) > )
			this.occupationent.Hide()


			this.origMoveTime = expect float (this.config.moveTime)

			// create the ship prop
			this.ship = CreateEntity( "prop_script" )
			this.ship.SetValueForModelKey( expect asset( this.config.model ) )
			this.ship.SetAngles( angles )
			this.ship.SetOrigin( origin + < 0, 0, expect float( this.config.groundToFeet ) > )
			this.ship.kv.solid = SOLID_VPHYSICS
			// this.ship.SetArmorType( ARMOR_TYPE_HEAVY )
			AddEntityCallback_OnDamaged( expect entity( this.ship ), OnShipDamaged )

			DispatchSpawn( expect entity( this.ship ) )

			this.ship.SetScriptName( UniqueString( "ship" ) )

			this.ship.SetMaxHealth( expect int( this.config.health ) )
			this.ship.SetHealth( expect int( this.config.health ) )

			this.SetShipFree()

			AddCallback_OnUseEntity( expect entity( this.ship ), OnShipUsed)

			// create the ship mover
			vector shipAngles = expect vector( this.ship.EyeAngles() )
			this.mover = CreateExpensiveScriptMover( origin, <0, shipAngles.y, shipAngles.z> )
			this.mover.SetPusher(true) //otherwise you can clip through the ship when standing on it & it can be used to crush titans now >:]

			this.ship.SetParent( this.mover )
			this.occupationent.SetParent(this.mover)

			spaceships[expect entity( this.ship )] <- this

			thread this.MoveShip()
			thread this.RotateShip()
			thread this.ClippingCheck()
			thread this.StartMoveControlTracking()


		}

		function SetShipFree() /* void */
		{
			if (IsValid(this.ship)) {
				this.ship.SetUsableByGroup( "pilot" )
				this.ship.SetUsePrompts( "Press %use% to enter", "Press %use% to enter")
			}
		}

		function SetShipOccupied() /* void */
		{
			if (IsValid (this.ship)) {
				this.ship.UnsetUsable()
			}
		}

		function Embark( /* CPlayer */ var player ) // void
		{
			try{
				if (IsValid(expect entity(player)) && IsAlive(expect entity(player))) {
					expect entity( player )

					player.spaceship = this

					vector shipAngles = expect vector( this.ship.EyeAngles() )
					vector shipOrigin = expect vector( this.ship.GetOrigin() )
					player.SetAngles(<0,shipAngles.y,shipAngles.z>)

					player.TouchGround()
					player.ForceStand()

					player.SetParent( this.mover )

					if (this.embarkedplayers["driver"] == null) { //driver
						this.embarkedplayers["driver"] <- player

						vector au = AnglesToUp( shipAngles )
						vector fv = expect vector (this.ship.GetForwardVector())

						float forwardCorrection = expect float( this.config.cockpitForwardCorrection )
						float upwardCorrection = expect float( this.config.cockpitUpwardCorrection )
						player.SetOrigin( shipOrigin + (fv * forwardCorrection)   +  (au * upwardCorrection) )
						player.SetAngles( shipAngles )

						//only give driver control
						AddButtonPressedPlayerInputCallback( player, IN_JUMP , OnJumpInput ) // starting / landing

						AddButtonPressedPlayerInputCallback( player, IN_ZOOM , OnFreeViewPressed ) // freeview start
						AddButtonReleasedPlayerInputCallback( player, IN_ZOOM, OnFreeViewReleased ) // freeview end
						AddButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE , OnFreeViewPressed ) // freeview start alt button
						AddButtonReleasedPlayerInputCallback( player, IN_ZOOM_TOGGLE, OnFreeViewReleased ) // freeview end alt button


						//status messages for driver
						NSCreateStatusMessageOnPlayer(player,"EMBARKED AS DRIVER","", "SHIPSTATUS")
						NSCreateStatusMessageOnPlayer(player,"SPEED: ","", "SHIPSPEED")


						//forward backswards is tracked in StartMoveControlTracking()

					} else if (this.embarkedplayers["shooter"] == null && this.config.dualseat == true) { //gunner
						this.embarkedplayers["shooter"] <- player

						vector au = AnglesToUp( shipAngles )
						vector fv = expect vector (this.ship.GetForwardVector())

						float forwardCorrection = expect float( this.config.cockpitForwardCorrectionShooter )
						float upwardCorrection = expect float( this.config.cockpitUpwardCorrectionShooter )
						player.SetOrigin( shipOrigin + (fv * forwardCorrection)   +  (au * upwardCorrection) )
						player.SetAngles( shipAngles )


						AddButtonPressedPlayerInputCallback( player, IN_ATTACK, OnAttackPressed ) // always give gunner attack controls
						AddButtonReleasedPlayerInputCallback( player, IN_ATTACK, OnAttackReleased )

						AddButtonPressedPlayerInputCallback( player, IN_ZOOM , OnGunnerViewPressed )
						AddButtonReleasedPlayerInputCallback( player, IN_ZOOM, OnGunnerViewReleased )
						AddButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE ,  OnGunnerViewPressed )
						AddButtonReleasedPlayerInputCallback( player, IN_ZOOM_TOGGLE, OnGunnerViewReleased )

						//status messages for shooter
						NSCreateStatusMessageOnPlayer(player,"EMBARKED AS GUNNER","", "SHIPSTATUS")
					}

					this.PlayShipInfoSound("HUD_Boost_Card_Radar_Jammer_RedTextBeep_1P",true) //beepclick sound
					this.PlayShipInfoSound("titan_eject_xbutton",true)

					//status messages for both
					NSCreateStatusMessageOnPlayer(player,"HEALTH:","", "SHIPHEALTH")
					thread this.UpdateHealthStatusMsg(player)

					AddButtonPressedPlayerInputCallback( player, IN_DUCK , OnExitUsed ) // exiting
					AddButtonPressedPlayerInputCallback( player, IN_DUCKTOGGLE , OnExitUsed ) // exiting alt button


					if (this.config.dualseat == false) {
						AddButtonPressedPlayerInputCallback( player, IN_ATTACK, OnAttackPressed ) // ship attack
						AddButtonReleasedPlayerInputCallback( player, IN_ATTACK, OnAttackReleased )
					}

					player.DisableWeaponViewModel()

					if (this.config.dualseat == true) {
						if (this.embarkedplayers["driver"] != null && this.embarkedplayers["shooter"] != null) {
							this.SetShipOccupied()
						}
					} else {
						this.SetShipOccupied()
					}

					AddDeathCallback( "player", OnPilotDeath )

					this.ship.Code_SetTeam( player.GetTeam() )
				}
			}catch(excep) {print(excep)}
		}

		function Disembark(shouldeject , playerent) /* void */
		{
			if(!IsValid(playerent)) {
				return
			}

			entity player = expect entity(playerent)
			player.spaceship = null

			foreach (key,value in this.embarkedplayers) {
				if (player == value) {
					this.embarkedplayers[key] = null
				}
			}

			player.ClearParent()
			player.UnforceStand()
			player.EnableWeaponViewModel()

			if( this.engineOn && IsValid( player ) && expect bool(shouldeject)) { //ejection
				if (PlayerPosInSolid(player, player.GetOrigin())) {
						player.SetOrigin(FindNearestSafeDisembarkPos(player,player.GetOrigin(),1)+(player.GetForwardVector()*-200)+<0,0,250>) //slight offset back so the player doesnt just crash into the wall when vel is added

						if (PlayerPosInSolid(player, player.GetOrigin())) {
							player.SetOrigin(FindNearestSafeDisembarkPos(player,player.GetOrigin(),1)) //if the offsett messed things up just tp again
						}
				}

				player.SetVelocity( player.GetVelocity() + <0,0,1000> )
			}

			foreach (key,value in this.embarkedplayers) {
				if (value == null) {
					this.SetShipFree()
				}
			}

			player.SetTakeDamageType( DAMAGE_YES )
			player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE



			DeregisterAllButtons( player )

			RemoveDeathCallback( "player", OnPilotDeath )

			if (!this.engineOn) {
				player.SetOrigin(FindNearestSafeDisembarkPos(player, player.GetOrigin() , 1) )
			}

			//status delete
			NSDeleteStatusMessageOnPlayer( player, "SHIPSPEED"  )
			NSDeleteStatusMessageOnPlayer( player, "SHIPSTATUS")
			NSDeleteStatusMessageOnPlayer( player, "SHIPHEALTH")

			this.ship.Code_SetTeam( TEAM_UNASSIGNED )
		}


		function MoveShip() /* void */
		{
			while ( IsValid( expect entity( this.ship ) ) )
			{
				try{
				if ( this.engineOn )
					{
						float moveTime = expect float( this.config.moveTime )

						vector moveTo = expect vector( this.ship.GetOrigin() + this.ship.GetForwardVector() * 500 )

						this.mover.NonPhysicsMoveTo( moveTo, moveTime , 0, 0.2 )
					}
				}catch(ex) {print(ex)}
				wait 0.1
			}
		}

		function StartMoveControlTracking() {

			float lowermovetimelimit = 3.0

			//status message math setup
			//i just did this and I already dont know how it works
			float maxreversed = (expect float (this.origMoveTime - lowermovetimelimit)) * -1
			float onetile = maxreversed / 45

			while (IsValid(expect entity (this.ship))) {
				try {
				if (this.embarkedplayers["driver"]) {
					//control
					if(this.embarkedplayers["driver"].GetInputAxisForward() < 0 && expect float (this.config.moveTime) < lowermovetimelimit) { //slow down
						this.config.moveTime = this.config.moveTime * 1.15
					}
					if (this.embarkedplayers["driver"].GetInputAxisForward() > 0 && expect float (this.config.moveTime) > this.origMoveTime){ //speed up
						this.config.moveTime = this.config.moveTime * 0.75
					}

					if (this.config.moveTime < this.origMoveTime ) { //limit
						this.config.moveTime = this.origMoveTime
					}

					//status message math/edit
					float tiles = ((expect float (this.config.moveTime) - lowermovetimelimit) * -1) / onetile
					string tilestring = "|"
					while (tiles > 1) {
					   tilestring = tilestring + "|"
					   tiles = tiles -1
					}

					NSEditStatusMessageOnPlayer (expect entity (this.embarkedplayers["driver"]),"SPEED:      " + tilestring,"", "SHIPSPEED");

				}
				}catch(ex) {print(ex)}

				WaitFrame()
			}
		}

		function RotateShip() /* void */
		{
			// entity prop
			while( IsValid( expect entity( this.ship ) ) ) {
				try {
				if ( !this.ship || !this.mover || !this.embarkedplayers["driver"] || !this.engineOn || this.freeView ){
					WaitFrame()
					continue
				} else if ( IsValid( expect entity( this.ship )) && IsValid( expect entity(this.embarkedplayers["driver"]))  ) {
					if (!(this.embarkedplayers["driver"].GetViewVector().z < -0.95) && !(this.embarkedplayers["driver"].GetViewVector().z > 0.95)) { //in combination with viewconewide() pretty decent fix for the spinning
					vector v = expect vector( this.embarkedplayers["driver"].EyeAngles() )
					v = <v.x,v.y,0>


					// move for 0.5 seconds to account for higher ping maybe?
					// with a lower move time the view sometimes starts "stuttering"
					this.mover.NonPhysicsRotateTo(v, 0.3, 0, 0)

					// actually rotate every 0.01 seconds
					// this means that the player waits for 0.1 seconds before moving!
					wait 0.01
					} else{
						//
						WaitFrame()
					}
				} else {
					WaitFrame()
				}
				}catch(ex) {print(ex);WaitFrame()}

			}
		}

		function StartingSequence() /* void */
		{
			try {
				if ( this.inManeuver )
					return

				this.mover.ClearParent()

				ViewConeWideInstant(expect entity (this.embarkedplayers["driver"])) //limits view so the driver cant turn ship way too fast

				this.mover.NonPhysicsMoveTo(
					expect vector( this.ship.GetOrigin() + <0,0,this.config.startheight> ),
					expect float( this.startManeuverTime ), 0.5,0.5 )


				thread void function() {
					this.inManeuver = true
					wait expect float( this.startManeuverTime )
					this.engineOn = true
				}()

				this.inManeuver = false
			} catch(ex) {} //ship might get destroyed in maneuver
			try {this.occupationent.Destroy()}catch(ex0) {}

		}

		function ClippingCheck() {
			while ( IsValid( expect entity( this.ship ) ) )
			{
				try {
				if ( this.engineOn)
				{
					local ignorents = [];
					foreach (playerent in GetPlayerArray()) {
						ignorents.append(playerent)
					}
					ignorents.append(this.ship)

					entity ent = expect entity (this.ship)
					int solidMask = TRACE_MASK_PLAYERSOLID
					vector orinal_pos = ent.GetOrigin()


					TraceResults result

					vector mins = < -this.config.shipwidth,-this.config.shipwidth,0>
					vector maxs = <this.config.shipwidth,this.config.shipwidth,this.config.shipheight>

					result = TraceHull( orinal_pos , orinal_pos, mins, maxs, ignorents, solidMask, TRACE_COLLISION_GROUP_DEBRIS )
					if ( IsValid( result.hitEnt )  ){
						this.Explode()
					}


				}
				}catch(ex) {print(ex)}
				WaitFrame()
			}
		}

		function Explode() {
			try {
				try{this.occupationent.Destroy()}catch(exc) {}
				this.ship.ClearParent()
				EmitSoundAtPosition( TEAM_UNASSIGNED, this.ship.GetOrigin(),"titan_death_explode")

				foreach (key,value in this.embarkedplayers) {
					if( value )
					{
						value.ClearParent()
						this.Disembark(true , value) //need to make it so that both eject
					}
				}


				this.ship.Destroy()

				if(IsValid(this.mover)) { this.mover.Destroy() }


				PlayFX( FX_MEGA_TURRECT_IMPACT_EXPLOSION,  expect vector (this.ship.GetOrigin()))
			}catch(ex0) {}
		}

		function ActivateWeaponSystem() {
			while (this.weaponsactive == true) { //allows you to hold down the fire button
				this.ShootWeaponSystem()
				WaitFrame()
			}
		}

		function ShootWeaponSystem() {
			try {
				if (this.engineOn && this.readytofire == true) {
					this.readytofire = false
					entity guy = CreateMarvin(expect entity (this.ship).GetTeam(),expect vector(this.ship.GetOrigin() + this.ship.GetForwardVector()*600),expect vector (this.ship.GetAngles()))
					DispatchSpawn( guy )
					guy.Freeze()
					guy.Hide()
					guy.SetMaxHealth(10000)
					guy.SetHealth(10000)


					/////////////////////////Quad-Laser-Lmg//////////////////////////////// (needs 4 barrels)
					if (this.config.weaponsystem == "QuadLaserLMG") {
						guy.ReplaceActiveWeapon("mp_weapon_defender")
						entity weapon = guy.GetMainWeapons()[0]
						for (int i=1;i<5;i++) {
							if(!this.ship) {break}
							//might fail if ship crashes
							vector shootvector = <this.ship.GetForwardVector().x,this.ship.GetForwardVector().y,this.ship.GetForwardVector().z + 0.05> //slightly up to match the green thingy

							vector au = AnglesToUp(this.ship.GetAngles())
							vector af = AnglesToForward(this.ship.GetAngles())
							vector ar = AnglesToRight(this.ship.GetAngles())
							vector origin;


							if (i == 1) {
								origin = expect vector (this.ship.GetOrigin() + (af * this.config.barrel1cannonPosForward) + (au * this.config.barrel1cannonPosUp) + (ar * this.config.barrel1cannonPosRight))
							}
							if (i == 2) {
								origin = expect vector (this.ship.GetOrigin() + (af * this.config.barrel2cannonPosForward) + (au * this.config.barrel2cannonPosUp) + (ar * this.config.barrel2cannonPosRight))}
							if (i == 3) {
								origin = expect vector (this.ship.GetOrigin() + (af * this.config.barrel3cannonPosForward) + (au * this.config.barrel3cannonPosUp) + (ar * this.config.barrel3cannonPosRight))
							}
							if (i == 4) {
								origin = expect vector (this.ship.GetOrigin() + (af * this.config.barrel4cannonPosForward) + (au * this.config.barrel4cannonPosUp) + (ar * this.config.barrel4cannonPosRight))
							}



							weapon.FireWeaponBullet( origin  , shootvector, 1, DF_GIB | DF_EXPLOSION )
							this.PlayShipInfoSound("weapon_chargerifle_fire_1p",true)
							//weapon_chargerifle_fire_1p

							vector traceEnd = expect vector(this.ship.GetOrigin() + shootvector * 56756) //max length
							TraceResults r = TraceLine( origin, traceEnd, [], TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
							CreateWeaponTracer(origin , r.endPos ,0.05)


							wait 0.05
						}
						thread this.StartWeaponSystemCooldown()
						guy.Destroy()
						weapon.Destroy()
					}

					/////////////////////////HeavyRockets//////////////////////////////// (needs at least 1 barrel)
					if (this.config.weaponsystem == "HeavyRockets") {
						guy.GiveOffhandWeapon("mp_titanweapon_dumbfire_rockets", OFFHAND_MELEE)
						entity weapon = guy.GetOffhandWeapons()[0]
						weapon.SetOwner(this.embarkedplayers["driver"])

						for (int i=1;i<4;i++){

							vector shootvector = <this.ship.GetForwardVector().x,this.ship.GetForwardVector().y,this.ship.GetForwardVector().z>

							vector rocketorigin = expect vector (this.ship.GetOrigin()
							+ this.ship.GetForwardVector() * expect float(this.config.barrel1cannonPosForward)
							+ this.ship.GetRightVector() * expect float (this.config.barrel1cannonPosRight)
							+ AnglesToUp(expect vector(this.ship.GetAngles())) * expect float (this.config.barrel1cannonPosUp))

							weapon.FireWeaponBolt(rocketorigin,shootvector,6000,damageTypes.largeCaliberExp ,damageTypes.largeCaliberExp ,false ,0 )
							this.PlayShipInfoSound("explo_archer_impact_1p",true)


							wait 0.1
						}

						thread this.StartWeaponSystemCooldown()

						guy.Destroy()
						weapon.Destroy()
					}
					/////////////////////////FullAutoLMG////////////////////////////////
					if (this.config.weaponsystem == "FullAutoLMG") {

						if(this.embarkedplayers["shooter"] == null || !this.embarkedplayers["shooter"]) {
							print("no shooter present")
							return
						}

						guy.ReplaceActiveWeapon("mp_weapon_smr")
						entity weapon = guy.GetMainWeapons()[0]

						thread this.StartWeaponSystemCooldown()

						vector origin = expect vector (this.ship.GetOrigin()
						+ this.ship.GetForwardVector() * expect float(this.config.barrel1cannonPosForward)
						+ this.ship.GetRightVector() * expect float (this.config.barrel1cannonPosRight)
						+ AnglesToUp(expect vector(this.ship.GetAngles())) * expect float (this.config.barrel1cannonPosUp))

						weapon.FireWeaponMissile( origin ,expect entity (this.embarkedplayers["shooter"]).GetViewVector(), 1.0, damageTypes.largeCaliberExp, damageTypes.largeCaliberExp, false, PROJECTILE_NOT_PREDICTED )
						this.PlayShipInfoSound(	"weapon_sidewinder_fire_1p",true)


						guy.Destroy()
						weapon.Destroy()
					}
				}
			}catch(ex) {}
		}

		function StartWeaponSystemCooldown() {
			wait this.config.weaponcooldown
			this.readytofire = true
		}


		function LandingSequence( /* vector */ landingSpot) /* void */
		{
			try {
				if ( this.inManeuver )
					return

				this.engineOn = false

				vector distant = expect vector( this.ship.GetOrigin() ) + expect vector( this.ship.GetForwardVector() ) * 500
				float t = expect float( this.config.moveTime )
				this.mover.NonPhysicsMoveTo( distant, t, 0, t )

				vector angles = expect vector( this.mover.GetAngles() )
				this.mover.RotateTo(<0,angles.y,0>, expect float( this.landingManeuverTime ), t / 3, t / 3 )

				thread void function( float t, vector landingSpot ) {
					this.inManeuver = true
					wait t + 0.5
					if (IsValid(this.mover)){
						try{
							this.mover.NonPhysicsMoveTo( landingSpot, expect float( this.landingManeuverTime ), t / 3, t / 3 )
						}catch(ex){print(ex)}
					}
					wait t
				}( t, expect vector( landingSpot ) )

				this.inManeuver = false
			} catch(ex) {this.inManeuver = false} //ship might get destroyed in the maneuver
		}

		function GunnerLookStart(playerent)
		{
			try{
				entity player = expect entity (playerent)
				NSCreateStatusMessageOnPlayer(player,"Gunner View Active","","GUNNERVIEWINFO")
				while(this.gunnerView && player == this.embarkedplayers["shooter"]) {
					vector origin = expect vector (this.ship.GetOrigin()
					+ this.ship.GetForwardVector() * expect float(this.config.barrel1cannonPosForward)
					+ this.ship.GetRightVector() * expect float (this.config.barrel1cannonPosRight)
					+ AnglesToUp(expect vector(this.ship.GetAngles()))  * -200) //slightly below gun (just gonna hope they dont shoot directly down idk)

					player.SetOrigin(origin)
					player.kv.VisibilityFlags = 0
					player.SetTakeDamageType( DAMAGE_NO )
					WaitFrame()
				}
				NSDeleteStatusMessageOnPlayer(  player, "GUNNERVIEWINFO" )
				player.SetTakeDamageType( DAMAGE_YES )
				player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE
				player.SetOrigin(expect vector ( this.ship.GetOrigin()) + (expect vector (this.ship.GetForwardVector()) * expect float( this.config.cockpitForwardCorrectionShooter ))   +  (AnglesToUp( expect vector (this.ship.GetAngles())) *  expect float( this.config.cockpitUpwardCorrectionShooter ) )) //original position

			}catch(ex){}

		}

		function PlayShipInfoSound(string soundid , bool shouldrepeat) {
			try {
				local alreadyplayedsound = false

				foreach (sound in this.soundsplayed) {
					if (sound == soundid) {alreadyplayedsound = true}
				}

				if (alreadyplayedsound ==false) {
					/*
					if (this.embarkedplayers["driver"]) { //only play the sound if there is a driver present
						EmitSoundAtPosition( this.embarkedplayers["driver"].GetTeam(), this.ship.GetOrigin() ,soundid)
					}
					else if (this.embarkedplayers["shooter"]) { //maybe the driver left
						EmitSoundAtPosition( this.embarkedplayers["shooter"].GetTeam(), this.ship.GetOrigin() ,soundid)
					}*/
					foreach (key,player in this.embarkedplayers){
						if (IsValid(player)) {
							EmitSoundOnEntityOnlyToPlayer(player,player,soundid )
						}
					}
				}
				if (shouldrepeat == false) {this.soundsplayed.append(soundid)}

			}catch(ex) {print(ex)}
		}

		function UpdateHealthStatusMsg(player) {
			//status message
			if (IsValid (expect entity (player)) && IsValid(this.ship)) {

				entity player = expect entity (player)

				float onetile = float(this.config.health) / 45
				float tiles = expect int(this.ship.GetHealth()) / onetile

				string tilestring = "|"
				while (tiles > 1) {
					tilestring = tilestring + "|"
					tiles = tiles -1
				}

				NSEditStatusMessageOnPlayer (player,"HEALTH:   " + tilestring,"", "SHIPHEALTH")

			}
		}



		function ConfigFromType( string type )
		{
			var config = {}
			switch( type ) {
				case "goblin":

					config.barrel1cannonPosForward <- 315.0
					config.barrel1cannonPosRight <- 0.0
					config.barrel1cannonPosUp <- -70.0


					config.model <- $"models/vehicle/goblin_dropship/goblin_dropship_hero.mdl"
					config.cockpitForwardCorrection <- 310.0
					config.cockpitUpwardCorrection <-  -60.0
					config.cockpitForwardCorrectionShooter <- 260.0
					config.cockpitUpwardCorrectionShooter <- -30.0
					config.explosions <- [ FX_MEGA_TURRECT_IMPACT_EXPLOSION ]
					config.health <- 12500
					config.moveTime <- 0.7
					config.groundToFeet <- 100.0
					config.shipwidth <- 250
					config.shipheight <- 100
					config.startheight <- 650
					config.dualseat <- true
					config.weaponsystem <- "FullAutoLMG"
					config.weaponcooldown <- 0.03
				break
				case "crow":

					config.barrel1cannonPosForward <- 300.0
					config.barrel1cannonPosRight <- 0.0
					config.barrel1cannonPosUp <- -50.0


					config.model <- $"models/vehicle/crow_dropship/crow_dropship_hero.mdl"
					config.cockpitForwardCorrection <- 270.0
					config.cockpitUpwardCorrection <- -35.0
					//todo: add shooter poscoorection just in case
					//
					config.explosions <- [ FX_MEGA_TURRECT_IMPACT_EXPLOSION ]
					config.health <- 10000
					config.moveTime <- 1.0
					config.groundToFeet <- 100.0
					config.shipwidth <- 250
					config.shipheight <- 100
					config.startheight <- 650
					config.dualseat <- false
					config.weaponsystem  <- "HeavyRockets"
					config.weaponcooldown <- 1
				break
				case "straton":
				default:

					config.barrel1cannonPosForward <- 250.0
					config.barrel1cannonPosRight <- 25
					config.barrel1cannonPosUp <- 45.0

					config.barrel2cannonPosForward <- 250.0
					config.barrel2cannonPosRight <- 25
					config.barrel2cannonPosUp <- 27.5

					config.barrel3cannonPosForward <- 250.0
					config.barrel3cannonPosRight <- -25
					config.barrel3cannonPosUp <- 44.0

					config.barrel4cannonPosForward <- 250.0
					config.barrel4cannonPosRight <- -25
					config.barrel4cannonPosUp <- 27.5


					config.model <- $"models/vehicle/straton/straton_imc_gunship_01.mdl"
					config.cockpitForwardCorrection <- 120.0
					config.cockpitUpwardCorrection <- 37.0
					//todo: add shooter poscoorection just in case
					//
					config.explosions <- [ FX_MEGA_TURRECT_IMPACT_EXPLOSION ]
					config.health <- 7500
					config.moveTime <- 0.6
					config.groundToFeet <- 0.0
					config.shipwidth <- 100
					config.shipheight <- 45
					config.startheight <- 400
					config.dualseat <- false
					config.weaponsystem <- "QuadLaserLMG" //"QuadLaserLmg"
					config.weaponcooldown <- 1
				break
			}
			return config
		}
	}
}


/////////////////////////////////////Damage-Callbacks//////////////////////////////////////////////////


void function OnShipDamaged( entity ship, var damageInfo )
{
	if ( !IsValid( ship ) ) {
		return
	}



	int damageSourceID = DamageInfo_GetDamageSourceIdentifier( damageInfo )
	entity attacker = DamageInfo_GetAttacker( damageInfo )
	float damageAmount = DamageInfo_GetDamage( damageInfo )

	if ( !damageSourceID && !damageAmount && !attacker ) {
		return
	}

	thread CreateHitmarkerForPlayer(attacker,ship.GetOrigin())

	if (attacker.IsTitan()) { //make them more difficult for titans without making them indestructable for pilots
		damageAmount = damageAmount / 2.5
	}

	float newHealth = ship.GetHealth() - damageAmount
	ship.SetHealth( newHealth )

	if (newHealth < (ship.GetMaxHealth()/3)) {
		spaceships[ship].PlayShipInfoSound("diag_gs_titanLegion_prime_briefCriticalDamage", false)
	}

	if( newHealth <= 0 )
	{
		spaceships[ship].Explode()
	}

	foreach (key,value in spaceships[ship].embarkedplayers) {
		spaceships[ship].UpdateHealthStatusMsg(value)
	}


}



/////////////////////////////////////Input-Callbacks//////////////////////////////////////////////////

var function OnShipUsed( var prop, var player )
{
	expect entity( prop )
	var spaceship = spaceships[prop]

	if (spaceship.embarkedplayers["driver"] != player && spaceship.embarkedplayers["shooter"] != player) {
		thread spaceship.Embark( player )
	}

}

void function OnExitUsed( entity player )
{
	if ( !player.spaceship )
		return

	var spaceship = player.spaceship
	if ( spaceship )
		player.spaceship.Disembark(true , player)
}

void function OnJumpInput( entity player )
{
	if ( !player.spaceship )
		return

	if ( player.spaceship.engineOn )
	{
		TraceResults results = TraceLandingSpot( expect entity( player.spaceship.ship ) )
		// if ( results.hitEnt && results.hitEnt.IsWorld() )
		if ( results.hitEnt )
		{
			player.spaceship.LandingSequence( results.endPos + <0,0,5> )
		}
	}
	else
		player.spaceship.StartingSequence()
}

void function OnFreeViewPressed( entity player )
{
	if ( player.spaceship ) {
		player.spaceship.freeView = true
	}
}

void function OnFreeViewReleased( entity player )
{
	if ( player.spaceship ) {
		player.spaceship.freeView = false
	}
}

void function OnGunnerViewPressed (entity player){
	if ( player.spaceship ) {
		player.spaceship.gunnerView = true
		thread player.spaceship.GunnerLookStart(player)
	}
}

void function OnGunnerViewReleased (entity player){
	if ( player.spaceship ) {
		player.spaceship.gunnerView = false
		NSDeleteStatusMessageOnPlayer(  player, "GUNNERVIEWINFO" ) //mainly just a backup since it is already in the gunnerlookstart function
	}
}


void function OnAttackPressed( entity player )
{
	if(player.spaceship) {
		player.spaceship.weaponsactive = true
		thread player.spaceship.ActivateWeaponSystem()
	}

}

void function OnAttackReleased ( entity player) {
	if(player.spaceship) {
		player.spaceship.weaponsactive = false
	}
}

void function OnPilotDeath( entity player, var damageInfo )
{
	try{
	player.spaceship.Disembark(false , player)
	player.SetTakeDamageType( DAMAGE_YES )
	player.kv.VisibilityFlags = ENTITY_VISIBLE_TO_EVERYONE
	NSDeleteStatusMessageOnPlayer( player, "SHIPSPEED"  )
	NSDeleteStatusMessageOnPlayer( player, "SHIPSTATUS")
	NSDeleteStatusMessageOnPlayer( player, "SHIPHEALTH")

	}catch(ex){}
}





/////////////////////////////////////Utility//////////////////////////////////////////////////

TraceResults function TraceLandingSpot( entity shipProp )
{
	vector distant = shipProp.GetOrigin() + shipProp.GetForwardVector() * 500
	vector traceStart = shipProp.GetOrigin()
	vector traceEnd = distant - < 0, 0, SPACESHIP_MAX_LANDING_HEIGHT >

	//printt( TraceLine( distant, traceEnd, null, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE ).endPos )

	return TraceLine( distant, traceEnd, null, TRACE_MASK_SHOT, TRACE_COLLISION_GROUP_NONE )
}

void function DeregisterAllButtons( entity player )
{
	RemoveButtonPressedPlayerInputCallback( player, IN_JUMP , OnJumpInput )
	RemoveButtonPressedPlayerInputCallback( player, IN_DUCK , OnExitUsed )
	RemoveButtonPressedPlayerInputCallback( player, IN_ZOOM , OnFreeViewPressed )
	RemoveButtonReleasedPlayerInputCallback( player, IN_ZOOM, OnFreeViewReleased )
	RemoveButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE , OnFreeViewPressed )
	RemoveButtonReleasedPlayerInputCallback( player, IN_ZOOM_TOGGLE, OnFreeViewReleased )
	RemoveButtonPressedPlayerInputCallback( player, IN_ATTACK, OnAttackPressed )
	RemoveButtonPressedPlayerInputCallback( player, IN_ZOOM , OnGunnerViewPressed )
	RemoveButtonReleasedPlayerInputCallback( player, IN_ZOOM, OnGunnerViewReleased )
	RemoveButtonPressedPlayerInputCallback( player, IN_ZOOM_TOGGLE ,  OnGunnerViewPressed )
	RemoveButtonReleasedPlayerInputCallback( player, IN_ZOOM_TOGGLE, OnGunnerViewReleased )
}

vector function FindNearestSafeDisembarkPos(entity player, vector targetPos, int severity)
{
    if(severity >= 600)
    {
       return < player.GetOrigin().x,player.GetOrigin().y,player.GetOrigin().z+1500 >
    }


	//check if adding/removing severity  from the x,y or z coords will stop the player from clipping

	//adding / removing y
    if( !PlayerPosInSolid( player, < targetPos.x, targetPos.y+severity, targetPos.z > ) )
        return < targetPos.x, targetPos.y+severity, targetPos.z >

    if( !PlayerPosInSolid( player, < targetPos.x, targetPos.y-severity, targetPos.z > ) )
        return < targetPos.x, targetPos.y-severity, targetPos.z >

	//adding / removing x
    if( !PlayerPosInSolid( player, < targetPos.x+severity, targetPos.y, targetPos.z > ) )
        return < targetPos.x+severity, targetPos.y, targetPos.z >

    if( !PlayerPosInSolid( player, < targetPos.x-severity, targetPos.y, targetPos.z > ) )
        return < targetPos.x-severity, targetPos.y, targetPos.z >

	//adding / removing z(height)
	if( !PlayerPosInSolid( player, < targetPos.x, targetPos.y, targetPos.z +severity> ) )
        return < targetPos.x, targetPos.y, targetPos.z +severity>

    //if( !PlayerPosInSolid( player, < targetPos.x, targetPos.y, targetPos.z -severity > ) ) causes weird behaviour
    //    return < targetPos.x, targetPos.y, targetPos.z -severity>


    return FindNearestSafeDisembarkPos( player, targetPos, severity+5 ) //severity goes up by 5 each time adding severity doesnt stop the player from clipping
}

bool function PlayerPosInSolid( entity player, vector targetPos ) //checks if a the player would be clipping if he were in targetpos
{
    int solidMask = TRACE_MASK_PLAYERSOLID
    vector mins
    vector maxs
    int collisionGroup = TRACE_COLLISION_GROUP_PLAYER
    array<entity> ignoreEnts = []
    ignoreEnts.append( player ) //in case we want to check player's current pos
    TraceResults result

    mins = player.GetPlayerMins()
    maxs = player.GetPlayerMaxs()
    result = TraceHull( targetPos, targetPos + Vector( 0, 0, 1), mins, maxs, ignoreEnts, solidMask, collisionGroup )
    if ( result.startSolid )
        return true

    return false

}

void function CreateWeaponTracer( vector startPos, vector endPos, float lifeDuration, asset tracerAsset = $"P_wpn_hand_laser_beam_BC" )
{
	entity cpEnd = CreateEntity( "info_placement_helper" )
	cpEnd.SetOrigin( endPos )
	SetTargetName( cpEnd, UniqueString( "arc_cannon_beam_cpEnd" ) )
	DispatchSpawn( cpEnd )

	entity tracer = CreateEntity( "info_particle_system" )
	tracer.kv.cpoint1 = cpEnd.GetTargetName()

	tracer.SetValueForEffectNameKey( tracerAsset )

	tracer.kv.start_active = 1
	tracer.SetOrigin( startPos )

	DispatchSpawn( tracer )

	tracer.Fire( "Start" )
	tracer.Fire( "StopPlayEndCap", "", lifeDuration )
	tracer.Kill_Deprecated_UseDestroyInstead( lifeDuration )
	cpEnd.Kill_Deprecated_UseDestroyInstead( lifeDuration )

}

void function CreateHitmarkerForPlayer(entity player, vector pos = <0,0,0>) {
	try {
		entity guy = CreateSoldier(TEAM_BOTH,pos,<0,0,0>)
		DispatchSpawn( guy )
		guy.Freeze()
		guy.Hide()
		wait 0.2
		guy.TakeDamage(1,player,null, { })
		guy.Destroy()
	}catch(ex) {print(ex)}

}

void function ViewConeWideInstant( entity player )
{
	if ( !player.IsPlayer() )
		return
	player.PlayerCone_SetLerpTime( 0.0 )

	player.PlayerCone_FromAnim()
	player.PlayerCone_SetMinYaw( -50 )
	player.PlayerCone_SetMaxYaw( 50 )
	player.PlayerCone_SetMinPitch( -40 )
	player.PlayerCone_SetMaxPitch( 40 )
}



//game crashes sometimes when killing titans with crow (not damaging just killing)
//maybe remove sunflairs , theyre really annoying when flying

//make gunnerview less janky and add some sort of indicators
//make kills count for the driver

//X //make the weapon owner the player so kill give points (dk if it works like that) [didnt work]
//X //try using SOLID_BBOX instead of SOLID_VPHYSICS so i dont have to put that stupid occupation box there [Didn't work , the resulting hitbox is way to large on starton]
//X //roll with a/d [was stupid , extremly disoiriantating]

//done: moveslow doesnt work on controler //used player.GetInputAxisForward() as a workaround
//sorta done , might want to change that later: make beter speed control

//done: add chathook color //used the new serverside rui instead
//done: add serverside rui
//done: make ship solid //setpusher(true) worked