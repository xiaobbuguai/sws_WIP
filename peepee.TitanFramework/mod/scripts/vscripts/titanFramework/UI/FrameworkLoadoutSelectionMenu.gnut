untyped
global function FrameworkSelectMenuInit
global function InitEditTitanClassMenu
struct{
	array<var> activateButtons
} file
void function FrameworkSelectMenuInit()
{
	AddMenu( "EditTitanClassMenu", $"resource/ui/menus/titanClasses.menu", InitEditTitanClassMenu )
	
	InitEditTitanClassMenu()
}

void function InitEditTitanClassMenu()
{
	print("Running titanClass menu init")
	var menu = GetMenu( "EditTitanClassMenu" )
	var dataTable = GetDataTable( $"datatable/default_titan_loadouts.rpak" )
	AddMenuEventHandler( menu, eUIEvent.MENU_OPEN, OnClassSelectMenu_Open )
	for ( int i = 0; i < 14; i++ )
	{
		var activateButton = Hud_GetChild( menu, "Button" + i )
		activateButton.s.rowIndex <- i
		Hud_SetVisible( activateButton, true )
		Hud_AddEventHandler( activateButton, UIE_CLICK, OnClassSelectButton_Activate )
		file.activateButtons.append(activateButton)
	}
	//AddMenuFooterOption( menu, BUTTON_A, "#A_BUTTON_SELECT" )
	AddMenuFooterOption( menu, BUTTON_B, "#B_BUTTON_BACK", "#BACK", frameworkMenuBack )
}
void function frameworkMenuBack(var menu)
{
	if(UIActiveCollection == GetTitanCollection("base", []))
	{
		PCBackButton_Activate(menu)
		return
	}
	UpdateClassSelectButtons(GetMenu( "EditTitanClassMenu" ), expect TitanCollectionOrEntryStruct(UIActiveCollection.Parent) ) 
}
void function OnClassSelectButton_Activate(var button)
{
	if(button.s.IsCollection)
	{
		print(UIActiveCollection.Name)
		foreach(string key, TitanCollectionOrEntryStruct value in UIActiveCollection.content)
		{
			print(key + " | "+ value.Name)
		}
		//print(expect string(button.s.titanClass))
		UpdateClassSelectButtons(GetMenu( "EditTitanClassMenu" ), UIActiveCollection.content[expect string(button.s.titanClass)])
		return
	}
	if(expect string(button.s.titanClass) == "")
		return
	if(shouldPrintDevStuff())
		print(button.s.rowIndex)
	if(GetModdedTitanClasses().contains(string(button.s.titanClass)))
	{
		int index = expect int(button.s.rowIndex)
		OverwriteGlobalTitanLoadoutByIndex(uiGlobal.editingLoadoutIndex, GetModdedTitanByClassNoPersist(expect string(button.s.titanClass)), true)
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive1 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(expect string(button.s.titanClass), "passive1"))[0].ref
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive2 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(expect string(button.s.titanClass), "passive2"))[0].ref
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive3 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(expect string(button.s.titanClass), "passive3"))[0].ref
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive4 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(expect string(button.s.titanClass), "passive4"))[0].ref
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive5 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(expect string(button.s.titanClass), "passive5"))[0].ref
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive6 = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(expect string(button.s.titanClass), "passive6"))[0].ref
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].titanExecution = GetAllItemsOfType(GetModdedTitanLoadoutPassiveTypeByClass(expect string(button.s.titanClass), "titanExecution"))[0].ref

		ClientCommand( "SetTitanClass "+uiGlobal.editingLoadoutIndex+" modded " + (button.s.titanClass) )
	}
	else if (IsBaseTitan(expect string(button.s.titanClass)))
	{
		int index = expect int(button.s.rowIndex)
		OverwriteGlobalTitanLoadoutByIndex(uiGlobal.editingLoadoutIndex, GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)), true)
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive1 = GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)).passive1
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive2 = GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)).passive2
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive3 = GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)).passive3
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive4 = GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)).passive4
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive5 = GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)).passive5
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].passive6 = GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)).passive6
		shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex].titanExecution = GetBaseTitanByClassNoPersist(expect string(button.s.titanClass)).titanExecution


		ClientCommand( "SetTitanClass "+uiGlobal.editingLoadoutIndex+" default " + (button.s.titanClass) )
	}
	if(shouldPrintDevStuff())
		PrintTitanLoadout(shGlobal.cachedTitanLoadouts[uiGlobal.editingLoadoutIndex])
	//uiGlobal.editingLoadoutIndex
}
void function OnClassSelectMenu_Open()
{
	print("openning class select")
	var menu = GetMenu( "EditTitanClassMenu" )
	UpdateClassSelectButtons(menu, GetTitanCollection("base", []))
}
TitanCollectionOrEntryStruct& UIActiveCollection
void function UpdateClassSelectButtons(var menu, TitanCollectionOrEntryStruct currentCollection)
{
	UIActiveCollection = currentCollection
	var title = Hud_GetChild(menu, "FolderTitle")
	if(UIActiveCollection == GetTitanCollection("base", []))
	{
		Hud_SetText(title, "")	
	}
	else
	{
		Hud_SetText(title, Localize(UIActiveCollection.Name))	
	}
	int i = 0
	array<TitanCollectionOrEntryStruct> collections
	array<TitanCollectionOrEntryStruct> moddedTitans
	foreach ( TitanCollectionOrEntryStruct entry in UIActiveCollection.content )
	{
		if(entry.IsCollection)
		{
			collections.append(entry)
			continue
		}
		if(GetModdedTitanClasses().contains(entry.Name))
		{
			moddedTitans.append(entry)
			continue
		}
		var activateButton = Hud_GetChild( menu, "Button" + i )
		string Name
		if(IsBaseTitan(entry.Name))
		{
			Name = GetBaseTitanByClassNoPersist(entry.Name).name
		}
		else
		{
			Name = "ERROR PLEASE REPORT THIS"
		}
		RHud_SetText( activateButton, Localize(Name) )
		activateButton.s.titanClass <- entry.Name
		activateButton.s.IsCollection <- false
		Hud_SetVisible( activateButton, true )
		Hud_SetEnabled( activateButton, true )
		i++
	}
	foreach ( TitanCollectionOrEntryStruct entry in moddedTitans )
	{
		var activateButton = Hud_GetChild( menu, "Button" + i )
		ModdedTitanData data = GetModdedTitanData(entry.Name)
		string Name 
		if(UIActiveCollection.showName)
			Name = Localize(data.Name)
		if(UIActiveCollection.showTagAsPrefix)
			Name = Localize(data.Tag) + Name
		if(UIActiveCollection.showTagAsSuffix)
			Name = Name + Localize(data.Tag)

		RHud_SetText( activateButton, Name )
		activateButton.s.titanClass <- entry.Name
		activateButton.s.IsCollection <- false
		Hud_SetVisible( activateButton, true )
		Hud_SetEnabled( activateButton, true )
		i++
	}
	foreach ( TitanCollectionOrEntryStruct entry in collections )
	{
		var activateButton = Hud_GetChild( menu, "Button" + i )

		RHud_SetText( activateButton, Localize(entry.Name) )
		activateButton.s.titanClass <- entry.Name
		activateButton.s.IsCollection <- true
		Hud_SetVisible( activateButton, true )
		Hud_SetEnabled( activateButton, true )
		i++
	}
	for ( ; i < 14; i++)
	{
		var activateButton = Hud_GetChild( menu, "Button" + i )
		activateButton.s.titanClass <- ""
		activateButton.s.IsCollection <- false
		Hud_SetVisible( activateButton, false )
		Hud_SetEnabled( activateButton, false )
	}
}
